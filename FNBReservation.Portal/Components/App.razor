@using Microsoft.AspNetCore.Components.Authorization
@using FNBReservation.Portal.Services
@inject AuthenticationStateProvider AuthStateProvider

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="css/app.css" />
    <link rel="stylesheet" href="FNBReservation.Portal.styles.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />
</head>
<body>
    <CascadingAuthenticationState>
        <Routes />
    </CascadingAuthenticationState>
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>
</html>

@code {
    private bool _firstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call the custom method to load authentication from localStorage
            // which will notify the auth state provider if a user is found
            if (AuthStateProvider is CustomAuthStateProvider customAuthProvider)
            {
                await customAuthProvider.GetAuthenticatedUserFromStorageAsync();
            }
            _firstRender = false;
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}