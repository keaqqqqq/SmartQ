@using System.ComponentModel.DataAnnotations
@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@inject IStaffService StaffService
@inject IOutletService OutletService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@rendermode InteractiveServer

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(IsEdit ? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Class="mr-2" />
            @(IsEdit ? "Edit Staff Member" : "Add Staff Member")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@staffModel" @bind-IsValid="@formIsValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="string" @bind-Value="staffModel.OutletId" Label="Outlet"
                               Required RequiredError="Outlet is required"
                               Variant="Variant.Outlined" FullWidth="true">
                        @foreach (var outlet in outlets)
                        {
                            <MudSelectItem Value="@outlet.OutletId">@outlet.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                @if (IsEdit && !string.IsNullOrEmpty(staffModel.UserId))
                {
                    <MudItem xs="12">
                        <MudTextField Value="@staffModel.UserId" Label="Staff ID"
                                      Variant="Variant.Outlined" FullWidth="true" ReadOnly="true"
                                      HelperText="System-generated ID for this staff member" />
                    </MudItem>
                }
                <MudItem xs="12">
                    <MudTextField @bind-Value="staffModel.FullName" Label="Full Name"
                                  Required RequiredError="Name is required"
                                  Variant="Variant.Outlined" FullWidth="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="staffModel.Username" Label="Username"
                                  Required RequiredError="Username is required"
                                  Variant="Variant.Outlined" FullWidth="true"
                                  Disabled="@IsEdit"
                                  HelperText="@(IsEdit ? "Username cannot be changed" : "Choose a unique username")" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="staffModel.Password" 
                                  Label="@(IsEdit ? "New Password (leave blank to keep unchanged)" : "Password")"
                                  Required="@(!IsEdit)" RequiredError="Password is required for new staff"
                                  Variant="Variant.Outlined" FullWidth="true"
                                  InputType="InputType.Password"
                                  HelperText="@(IsEdit ? "Must be at least 8 characters if provided (when left blank, a placeholder is sent to the API)" : "Must be at least 8 characters")" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="staffModel.Email" Label="Email"
                                  Required RequiredError="Email is required"
                                  Variant="Variant.Outlined" FullWidth="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="staffModel.Phone" Label="Phone"
                                  Required RequiredError="Phone is required"
                                  Variant="Variant.Outlined" FullWidth="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect @bind-Value="staffModel.Role" Label="Role"
                               Required RequiredError="Role is required"
                               Variant="Variant.Outlined" FullWidth="true">
                        <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                        <MudSelectItem Value="@("OutletStaff")">OutletStaff</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="@(!formIsValid)" OnClick="Submit">
            @(IsEdit ? "Update" : "Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;

    [Parameter] public string OutletId { get; set; } = string.Empty;
    [Parameter] public StaffDto? Staff { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;

    private StaffFormModel staffModel = new();
    private MudForm form = null!;
    private bool formIsValid = false;
    private List<OutletSummaryDto> outlets = new();

    protected override async Task OnInitializedAsync()
    {
        // Load outlets for the dropdown
        await LoadOutlets();

        if (IsEdit && Staff != null)
        {
            staffModel = new StaffFormModel
                {
                    StaffId = Staff.StaffId,
                    UserId = Staff.UserId,
                    FullName = Staff.FullName,
                    Username = Staff.Username,
                    Email = Staff.Email,
                    Phone = Staff.Phone,
                    Role = Staff.Role,
                    OutletId = Staff.OutletId // Use the staff's outlet ID when editing
                };
        }
        else
        {
            staffModel = new StaffFormModel
                {
                    OutletId = OutletId // Use the provided outlet ID when adding
                };
        }
    }

    private async Task LoadOutlets()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "Loading outlets for staff form...");
            var apiOutlets = await OutletService.GetOutletsAsync();
            
            outlets = apiOutlets.Select(o => new OutletSummaryDto
            {
                OutletId = o.id,
                Name = o.Name,
                Location = o.Location
            }).ToList();
            
            await JS.InvokeVoidAsync("console.log", $"Loaded {outlets.Count} outlets for staff form");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading outlets: {ex.Message}");
            Snackbar.Add($"Error loading outlets: {ex.Message}", Severity.Error);
        }
    }

    private async Task Submit()
    {
        try
        {
            // Validate password separately based on context
            if (!IsEdit && string.IsNullOrEmpty(staffModel.Password))
            {
                Snackbar.Add("Password is required for new staff members", Severity.Error);
                return;
            }
            
            if (!string.IsNullOrEmpty(staffModel.Password) && staffModel.Password.Length < 8)
            {
                Snackbar.Add("Password must be at least 8 characters", Severity.Error);
                return;
            }
            
            // If we're editing and no password is provided, inform the user about what's happening
            if (IsEdit && string.IsNullOrEmpty(staffModel.Password))
            {
                await JS.InvokeVoidAsync("console.log", "Update with no password change - using placeholder");
            }
            
            bool result;

            // Convert our form model to StaffDto
            var staffDto = new StaffDto
                {
                    StaffId = IsEdit ? Staff!.StaffId : string.Empty,
                    OutletId = staffModel.OutletId,
                    FullName = staffModel.FullName,
                    Username = staffModel.Username,
                    Password = staffModel.Password,
                    Email = staffModel.Email,
                    Phone = staffModel.Phone,
                    Role = staffModel.Role,
                    CreatedAt = IsEdit ? Staff!.CreatedAt : DateTime.Now
                };

            if (IsEdit)
            {
                result = await StaffService.UpdateStaffAsync(staffModel.OutletId, staffDto);
            }
            else
            {
                result = await StaffService.CreateStaffAsync(staffModel.OutletId, staffDto);
            }

            if (result)
            {
                Snackbar.Add(IsEdit ? "Staff member updated successfully" : "Staff member created successfully",
                    Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Failed to save staff member", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            // Add more helpful error message for the password validation error
            if (ex.Message.Contains("API requires a password"))
            {
                Snackbar.Add("The backend API requires a password field even when not changing it. A placeholder valid password will be used.", Severity.Warning);
                // You could retry the operation here with a placeholder password if needed
            }
            else
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private class StaffFormModel
    {
        public string StaffId { get; set; } = string.Empty;

        [Required(ErrorMessage = "Full name is required")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone is required")]
        public string Phone { get; set; } = string.Empty;

        [Required(ErrorMessage = "Role is required")]
        public string Role { get; set; } = "OutletStaff";

        [Required(ErrorMessage = "Outlet is required")]
        public string OutletId { get; set; } = string.Empty;

        public string UserId { get; set; } = string.Empty;
    }
}