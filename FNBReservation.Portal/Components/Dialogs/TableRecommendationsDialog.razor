@using FNBReservation.Portal.Models
@inject IJSRuntime JS
@using MudBlazor.Utilities

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudText Typo="Typo.h6" Class="mb-3">Table Recommendations</MudText>
            
            <MudText Typo="Typo.body2" Class="mb-4">
                The following tables are recommended for this customer based on party size and waiting time:
            </MudText>
            
            @if (Recommendations.Count > 0)
            {
                <MudList Dense="false" Clickable="true" T="string">
                    @foreach (var recommendation in Recommendations.OrderByDescending(r => r.RecommendationScore))
                    {
                        <MudListItem OnClick="@(() => SelectTable(recommendation.TableId))" 
                                    Selected="@(SelectedTableId == recommendation.TableId)"
                                    Class="rounded-lg pa-2 mb-2" T="string">
                            <div class="d-flex justify-space-between align-center">
                                <div>
                                    <MudText Typo="Typo.subtitle1">
                                        <span class="d-inline-block" style="width: 30px; height: 30px; line-height: 30px; text-align: center; 
                                            border-radius: 4px; background-color: var(--mud-palette-primary); color: white; margin-right: 8px;">
                                            @recommendation.TableNumber
                                        </span>
                                        Table @recommendation.TableNumber
                                    </MudText>
                                    <div class="d-flex align-center mt-1 ml-9">
                                        <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" Class="mr-1" />
                                        <MudText Typo="Typo.body2" Class="mr-3">Capacity: @recommendation.Capacity persons</MudText>
                                    </div>
                                    <div class="d-flex align-center mt-1 ml-9">
                                        <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Small" Class="mr-1" />
                                        <MudText Typo="Typo.body2">Location: @(recommendation.Location ?? "N/A")</MudText>
                                    </div>
                                </div>
                                <MudChip Color="@GetScoreColor(recommendation.RecommendationScore)" Size="Size.Small" T="string">
                                    @Math.Round(recommendation.RecommendationScore * 100)% Match
                                </MudChip>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Class="my-2">No table recommendations found</MudAlert>
            }

            @if (SelectedTableId != null && CustomerInfo != null)
            {
                <MudPaper Elevation="0" Class="mt-4 pa-3" Style="background-color: #FFF8E1; border-radius: 8px;">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">Assign Selected Table To:</MudText>
                    <div class="d-flex align-center mb-1">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="mr-2" />
                        <MudText Typo="Typo.body2">@CustomerInfo.CustomerName</MudText>
                    </div>
                    <div class="d-flex align-center mb-1">
                        <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" Class="mr-2" />
                        <MudText Typo="Typo.body2">@CustomerInfo.PartySize guests</MudText>
                    </div>
                    <div class="d-flex align-center mb-1">
                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-2" />
                        <MudText Typo="Typo.body2">Waiting time: @GetWaitingTime(CustomerInfo.QueuedAt)</MudText>
                    </div>
                </MudPaper>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
        <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" 
                   Disabled="@(string.IsNullOrEmpty(SelectedTableId))">
            Assign Selected Table
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; }
    
    [Parameter] public List<TableRecommendationDto> Recommendations { get; set; } = new List<TableRecommendationDto>();
    [Parameter] public QueueEntryDto CustomerInfo { get; set; }
    
    private string SelectedTableId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("console.log", $"TableRecommendationsDialog initialized with {Recommendations.Count} recommendations");
        
        if (Recommendations.Count > 0)
        {
            // Auto-select the highest scoring recommendation
            var highestScore = Recommendations.OrderByDescending(r => r.RecommendationScore).FirstOrDefault();
            if (highestScore != null)
            {
                SelectedTableId = highestScore.TableId;
                await JS.InvokeVoidAsync("console.log", $"Auto-selected table with highest score: {highestScore.TableNumber} ({highestScore.RecommendationScore * 100}%)");
            }
        }
    }
    
    private void SelectTable(string tableId)
    {
        SelectedTableId = tableId;
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private void Submit()
    {
        // Return the selected table ID to the caller, who will make the assign-table API call
        MudDialog.Close(DialogResult.Ok(SelectedTableId));
    }
    
    private Color GetScoreColor(double score)
    {
        if (score >= 0.8) return Color.Success;
        if (score >= 0.5) return Color.Info;
        return Color.Warning;
    }

    private string GetWaitingTime(DateTime queuedAt)
    {
        // Subtract 8 hours from current time for time zone adjustment
        var adjustedCurrentTime = DateTime.Now.AddHours(-8);
        var elapsed = adjustedCurrentTime - queuedAt;
        
        // Handle negative elapsed time
        if (elapsed.TotalSeconds < 0)
        {
            return "0m";
        }
        
        if (elapsed.Hours > 0)
        {
            return $"{elapsed.Hours}h {elapsed.Minutes}m";
        }
        
        return $"{elapsed.Minutes}m";
    }
} 