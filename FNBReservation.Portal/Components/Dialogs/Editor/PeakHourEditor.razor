@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IPeakHourService PeakHourService
@inject IJSRuntime JS
@rendermode InteractiveServer

<MudPaper Elevation="0" Class="pa-4">
    <MudText Typo="Typo.subtitle1" Class="mb-4">Peak Hours Configuration</MudText>

    <MudTable Items="@PeakHours" Dense="true" Hover="true" Bordered="true" Striped="true" Loading="@_loading">
        <ToolBarContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenPeakHourDialog" Class="ml-auto" Disabled="@_loading">Add Peak Hour</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Days</MudTh>
            <MudTh>Hours</MudTh>
            <MudTh>Allocation</MudTh>
            <MudTh>Active</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Days">@FormatDaysOfWeek(context.DaysOfWeek)</MudTd>
            <MudTd DataLabel="Hours">@FormatTimeRange(context.StartTime, context.EndTime)</MudTd>
            <MudTd DataLabel="Allocation">@context.ReservationAllocationPercent%</MudTd>
            <MudTd DataLabel="Active">
                <MudChip Color="@(context.IsActive ? Color.Success : Color.Error)" Size="Size.Small" T="string">
                    @(context.IsActive ? "Active" : "Inactive")
                </MudChip>
            </MudTd>
            <MudTd>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                   OnClick="@(() => EditPeakHour(context))" Disabled="@_loading" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                   OnClick="@(() => RemovePeakHour(context))" Disabled="@_loading" />
                </MudStack>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Align="Align.Center">No peak hours added yet. Click the Add Peak Hour button to get started.</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <LoadingContent>
            <MudText Align="Align.Center">Loading peak hours...</MudText>
        </LoadingContent>
    </MudTable>
</MudPaper>

@code {
    [Parameter]
    public List<PeakHour> PeakHours { get; set; } = new List<PeakHour>();

    [Parameter]
    public EventCallback<List<PeakHour>> PeakHoursChanged { get; set; }

    [Parameter]
    public string OutletId { get; set; }

    [Parameter]
    public bool UseApiIntegration { get; set; } = false;

    private PeakHour currentPeakHour = new();
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        await JS.InvokeVoidAsync("console.log", $"PeakHourEditor initialized: OutletId={OutletId}, UseApiIntegration={UseApiIntegration}");
        
        if (UseApiIntegration)
        {
            if (!string.IsNullOrEmpty(OutletId))
            {
                await JS.InvokeVoidAsync("console.log", $"Will attempt to load peak hours from API for outlet {OutletId}");
                await LoadPeakHoursFromApi();
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", "Cannot load peak hours: OutletId is empty");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("console.log", $"Using local peak hours, count: {PeakHours?.Count ?? 0}");
        }
    }

    private async Task LoadPeakHoursFromApi()
    {
        try
        {
            _loading = true;
            await JS.InvokeVoidAsync("console.log", $"LoadPeakHoursFromApi: Loading peak hours for outlet {OutletId}");
            
            var peakHours = await PeakHourService.GetPeakHoursAsync(OutletId);
            
            if (peakHours != null)
            {
                await JS.InvokeVoidAsync("console.log", $"Loaded {peakHours.Count} peak hours from API");
                
                // Always update the list with what came from the API
                PeakHours = peakHours;
                await PeakHoursChanged.InvokeAsync(PeakHours);
                
                if (peakHours.Count == 0)
                {
                    await JS.InvokeVoidAsync("console.log", "API returned an empty peak hours list");
                }
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", "API returned null for peak hours");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading peak hours: {ex.Message}");
            Snackbar.Add($"Error loading peak hours: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private string FormatDaysOfWeek(string daysOfWeek)
    {
        if (string.IsNullOrEmpty(daysOfWeek))
            return "None";

        var days = daysOfWeek.Split(',');
        var dayNames = new List<string>();

        foreach (var day in days)
        {
            if (int.TryParse(day, out int dayNumber))
            {
                dayNames.Add(dayNumber switch
                {
                    1 => "Mon",
                    2 => "Tue",
                    3 => "Wed",
                    4 => "Thu",
                    5 => "Fri",
                    6 => "Sat",
                    7 => "Sun",
                    _ => day
                });
            }
        }

        // Check if all days are selected
        if (dayNames.Count == 7)
        {
            return "All Days";
        }

        return string.Join(", ", dayNames);
    }

    private string FormatTimeRange(string startTime, string endTime)
    {
        // Convert strings to TimeSpan and then format properly
        if (TimeSpan.TryParse(startTime, out TimeSpan start) && TimeSpan.TryParse(endTime, out TimeSpan end))
        {
            // Create DateTime objects to get AM/PM formatting
            var startDateTime = DateTime.Today.Add(start);
            var endDateTime = DateTime.Today.Add(end);

            return $"{startDateTime.ToString("hh:mm tt").ToLower()} - {endDateTime.ToString("hh:mm tt").ToLower()}";
        }

        // Fallback if parsing fails
        return $"{startTime} - {endTime}";
    }

    private async Task OpenPeakHourDialog()
    {
        // Initialize a new peak hour with default values
        currentPeakHour = new PeakHour
            {
                Name = "Dinner Peak Hour",
                StartTime = "18:00:00",
                EndTime = "20:00:00",
                DaysOfWeek = "1,2,3,4,5,6,7", // Monday to Sunday
                ReservationAllocationPercent = 100,
                IsActive = true,
                StartDate = DateTime.Now,
                EndDate = DateTime.Now.AddDays(30)
            };

        var parameters = new DialogParameters
            {
                ["PeakHour"] = currentPeakHour,
                ["EditMode"] = false
            };

        var dialog = await DialogService.ShowAsync<PeakHourDialog>("Add Peak Hour", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is PeakHour peakHour)
        {
            try
            {
                _loading = true;
                
                if (UseApiIntegration && !string.IsNullOrEmpty(OutletId))
                {
                    // Save to API
                    await JS.InvokeVoidAsync("console.log", $"Creating peak hour via API: {peakHour.Name}");
                    var createdPeakHour = await PeakHourService.CreatePeakHourAsync(OutletId, peakHour);
                    
                    // Add to the local list
                    PeakHours.Add(createdPeakHour);
                }
                else
                {
                    // Just update local state
                    PeakHours.Add(peakHour);
                }
                
                await PeakHoursChanged.InvokeAsync(PeakHours);
                Snackbar.Add("Peak hour added successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.log", $"Error creating peak hour: {ex.Message}");
                Snackbar.Add($"Error creating peak hour: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task EditPeakHour(PeakHour peakHour)
    {
        // Make a copy of the peak hour to edit
        currentPeakHour = new PeakHour
            {
                Id = peakHour.Id,
                Name = peakHour.Name,
                StartTime = peakHour.StartTime,
                EndTime = peakHour.EndTime,
                DaysOfWeek = peakHour.DaysOfWeek,
                ReservationAllocationPercent = peakHour.ReservationAllocationPercent,
                IsActive = peakHour.IsActive,
                StartDate = peakHour.StartDate,
                EndDate = peakHour.EndDate
            };

        var parameters = new DialogParameters
            {
                ["PeakHour"] = currentPeakHour,
                ["EditMode"] = true
            };

        var dialog = await DialogService.ShowAsync<PeakHourDialog>("Edit Peak Hour", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is PeakHour updatedPeakHour)
        {
            try
            {
                _loading = true;
                
                if (UseApiIntegration && !string.IsNullOrEmpty(OutletId) && !string.IsNullOrEmpty(peakHour.Id))
                {
                    // Update via API
                    await JS.InvokeVoidAsync("console.log", $"Updating peak hour via API: {updatedPeakHour.Name}, ID: {peakHour.Id}");
                    var apiUpdatedPeakHour = await PeakHourService.UpdatePeakHourAsync(OutletId, peakHour.Id, updatedPeakHour);
                    
                    // Update in the local list
                    var index = PeakHours.IndexOf(peakHour);
                    if (index >= 0)
                    {
                        PeakHours[index] = apiUpdatedPeakHour;
                    }
                }
                else
                {
                    // Just update local state
                    var index = PeakHours.IndexOf(peakHour);
                    if (index >= 0)
                    {
                        PeakHours[index] = updatedPeakHour;
                    }
                }
                
                await PeakHoursChanged.InvokeAsync(PeakHours);
                Snackbar.Add("Peak hour updated successfully", Severity.Success);
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.log", $"Error updating peak hour: {ex.Message}");
                Snackbar.Add($"Error updating peak hour: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }

    private async Task RemovePeakHour(PeakHour peakHour)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to remove the peak hour '{peakHour.Name}'?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Peak Hour", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                _loading = true;
                
                if (UseApiIntegration && !string.IsNullOrEmpty(OutletId) && !string.IsNullOrEmpty(peakHour.Id))
                {
                    // Delete via API
                    await JS.InvokeVoidAsync("console.log", $"Deleting peak hour via API: {peakHour.Name}, ID: {peakHour.Id}");
                    await PeakHourService.DeletePeakHourAsync(OutletId, peakHour.Id);
                    
                    // Remove from local list
                    PeakHours.Remove(peakHour);
                }
                else
                {
                    // Just update local state
                    PeakHours.Remove(peakHour);
                }
                
                await PeakHoursChanged.InvokeAsync(PeakHours);
                Snackbar.Add("Peak hour removed", Severity.Success);
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.log", $"Error deleting peak hour: {ex.Message}");
                Snackbar.Add($"Error deleting peak hour: {ex.Message}", Severity.Error);
            }
            finally
            {
                _loading = false;
            }
        }
    }
}