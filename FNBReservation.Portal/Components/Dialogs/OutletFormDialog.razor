@using System.Net.Http.Json
@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@inject IOutletService OutletService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@isValid">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Basic Info">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="outlet.Name" Label="Outlet Name" Required="true" RequiredError="Name is required!" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="outlet.Location" Label="Location" Required="true" RequiredError="Location is required!" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSelect T="string" @bind-Value="outlet.Status" Label="Status" Required="true">
                                <MudSelectItem Value="@("Active")">Active</MudSelectItem>
                                <MudSelectItem Value="@("Inactive")">Inactive</MudSelectItem>
                                <MudSelectItem Value="@("Maintenance")">Maintenance</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="outlet.Contact.Phone" Label="Phone Number" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="outlet.Contact.Email" Label="Email" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="outlet.Contact.Website" Label="Website" />
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Reservation Settings">
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="outlet.MinAdvanceReservationTime" Label="Min Advance Reservation (hours)" Min="0" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="outlet.MaxAdvanceReservationTime" Label="Max Advance Reservation (days)" Min="1" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSwitch @bind-Checked="outlet.QueueEnabled" Color="Color.Primary" Label="Enable Queue" T="bool" />
                        </MudItem>
                    </MudGrid>

                    <MudExpansionPanels>
                        <MudExpansionPanel Text="Special Requirements">
                            <MudStack>
                                @foreach (var (req, index) in outlet.SpecialRequirements.Select((value, i) => (value, i)))
                                {
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudTextField @bind-Value="outlet.SpecialRequirements[index]" Label="Requirement" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                                       OnClick="@(() => outlet.SpecialRequirements.RemoveAt(index))" />
                                    </MudStack>
                                }
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary"
                                           OnClick="@(() => outlet.SpecialRequirements.Add(string.Empty))">
                                    Add Requirement
                                </MudButton>
                            </MudStack>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudTabPanel>

                <MudTabPanel Text="Operating Hours">
                    <MudGrid>
                        @foreach (var day in days)
                        {
                            var daySchedule = GetDaySchedule(day);
                            <MudItem xs="12">
                                <MudPaper Class="pa-4" Elevation="0">
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudSwitch @bind-Checked="daySchedule.IsOpen" Color="Color.Primary" Label="@day" T="bool" />
                                        </MudItem>
                                        @if (daySchedule.IsOpen)
                                        {
                                            <MudItem xs="12" sm="6">
                                                <MudTimePicker Label="Open Time" @bind-Time="openTimes[day]" />
                                            </MudItem>
                                            <MudItem xs="12" sm="6">
                                                <MudTimePicker Label="Close Time" @bind-Time="closeTimes[day]" />
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudTabPanel>

                <MudTabPanel Text="Tables">
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="mb-4"
                               OnClick="@AddTable">
                        Add Table
                    </MudButton>

                    <MudTable Items="@outlet.Tables" Hover="true" Breakpoint="Breakpoint.Sm" Dense="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Capacity</MudTh>
                            <MudTh>Location</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="table">
                            <MudTd DataLabel="Name">
                                <MudTextField @bind-Value="table.Name" Margin="Margin.Dense" />
                            </MudTd>
                            <MudTd DataLabel="Capacity">
                                <MudNumericField @bind-Value="table.Capacity" Min="1" Margin="Margin.Dense" />
                            </MudTd>
                            <MudTd DataLabel="Location">
                                <MudTextField @bind-Value="table.Location" Margin="Margin.Dense" />
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <MudSelect @bind-Value="table.Status" Margin="Margin.Dense">
                                    <MudSelectItem Value="@("Available")">Available</MudSelectItem>
                                    <MudSelectItem Value="@("Reserved")">Reserved</MudSelectItem>
                                    <MudSelectItem Value="@("OutOfService")">Out of Service</MudSelectItem>
                                </MudSelect>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error"
                                               OnClick="@(() => outlet.Tables.Remove(table))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudTabPanel>
            </MudTabs>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="@(!isValid)" OnClick="Submit">
            @(IsEdit ? "Update" : "Create")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public OutletDto? Outlet { get; set; }
    [Parameter] public bool IsEdit { get; set; } = false;

    private OutletDto outlet = new();
    private bool isValid = false;
    private MudForm form = null!;
    private List<string> days = new() { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    private Dictionary<string, TimeSpan?> openTimes = new();
    private Dictionary<string, TimeSpan?> closeTimes = new();

    protected override void OnInitialized()
    {
        if (IsEdit && Outlet != null)
        {
            // Create a deep copy instead of using 'with' since OutletDto is not a record
            outlet = new OutletDto
                {
                    OutletId = Outlet.OutletId,
                    Name = Outlet.Name,
                    Location = Outlet.Location,
                    Status = Outlet.Status,
                    MaxAdvanceReservationTime = Outlet.MaxAdvanceReservationTime,
                    MinAdvanceReservationTime = Outlet.MinAdvanceReservationTime,
                    QueueEnabled = Outlet.QueueEnabled,
                    SpecialRequirements = new List<string>(Outlet.SpecialRequirements),
                    Contact = new ContactInfo
                    {
                        Phone = Outlet.Contact.Phone,
                        Email = Outlet.Contact.Email,
                        Website = Outlet.Contact.Website
                    },
                    OperatingHours = new OperatingHours
                    {
                        Monday = CopyDaySchedule(Outlet.OperatingHours.Monday),
                        Tuesday = CopyDaySchedule(Outlet.OperatingHours.Tuesday),
                        Wednesday = CopyDaySchedule(Outlet.OperatingHours.Wednesday),
                        Thursday = CopyDaySchedule(Outlet.OperatingHours.Thursday),
                        Friday = CopyDaySchedule(Outlet.OperatingHours.Friday),
                        Saturday = CopyDaySchedule(Outlet.OperatingHours.Saturday),
                        Sunday = CopyDaySchedule(Outlet.OperatingHours.Sunday)
                    },
                    Tables = Outlet.Tables.Select(t => new TableInfo
                    {
                        TableId = t.TableId,
                        Name = t.Name,
                        Capacity = t.Capacity,
                        Status = t.Status,
                        Location = t.Location
                    }).ToList()
                };
        }

        // Initialize time pickers
        foreach (var day in days)
        {
            var daySchedule = GetDaySchedule(day);

            if (TimeSpan.TryParse(daySchedule.OpenTime, out var openTime))
            {
                openTimes[day] = openTime;
            }
            else
            {
                openTimes[day] = TimeSpan.FromHours(9);
            }

            if (TimeSpan.TryParse(daySchedule.CloseTime, out var closeTime))
            {
                closeTimes[day] = closeTime;
            }
            else
            {
                closeTimes[day] = TimeSpan.FromHours(22);
            }
        }
    }

    private DaySchedule CopyDaySchedule(DaySchedule original)
    {
        return new DaySchedule
            {
                IsOpen = original.IsOpen,
                OpenTime = original.OpenTime,
                CloseTime = original.CloseTime,
                BreakTimes = original.BreakTimes.Select(bt => new BreakTime
                {
                    Start = bt.Start,
                    End = bt.End
                }).ToList()
            };
    }

    private DaySchedule GetDaySchedule(string day)
    {
        return day switch
        {
            "Monday" => outlet.OperatingHours.Monday,
            "Tuesday" => outlet.OperatingHours.Tuesday,
            "Wednesday" => outlet.OperatingHours.Wednesday,
            "Thursday" => outlet.OperatingHours.Thursday,
            "Friday" => outlet.OperatingHours.Friday,
            "Saturday" => outlet.OperatingHours.Saturday,
            "Sunday" => outlet.OperatingHours.Sunday,
            _ => new DaySchedule()
        };
    }

    private void SetDayScheduleTimes()
    {
        foreach (var day in days)
        {
            var daySchedule = GetDaySchedule(day);

            if (openTimes.TryGetValue(day, out var openTime) && openTime.HasValue)
            {
                daySchedule.OpenTime = $"{openTime.Value.Hours:D2}:{openTime.Value.Minutes:D2}";
            }

            if (closeTimes.TryGetValue(day, out var closeTime) && closeTime.HasValue)
            {
                daySchedule.CloseTime = $"{closeTime.Value.Hours:D2}:{closeTime.Value.Minutes:D2}";
            }
        }
    }

    private void AddTable()
    {
        var tableCount = outlet.Tables.Count + 1;
        outlet.Tables.Add(new TableInfo
            {
                TableId = Guid.NewGuid().ToString(),
                Name = $"Table {tableCount}",
                Capacity = 4,
                Location = "Main Area",
                Status = "Available"
            });
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        try
        {
            // Update operating hours from time pickers
            SetDayScheduleTimes();

            bool result;

            if (IsEdit)
            {
                result = await OutletService.UpdateOutletAsync(outlet);
            }
            else
            {
                outlet.OutletId = Guid.NewGuid().ToString();
                result = await OutletService.CreateOutletAsync(outlet);
            }

            if (result)
            {
                Snackbar.Add(IsEdit ? "Outlet updated successfully" : "Outlet created successfully", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add("Operation failed", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}