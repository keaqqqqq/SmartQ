@using Microsoft.AspNetCore.Components.Authorization
@using FNBReservation.Portal.Services
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider
@inject JwtTokenService TokenService
@rendermode InteractiveServer

<MudDrawer Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="@DrawerVariant.Mini" 
           DisableOverlay="true" OpenMiniOnHover="true">

    <div style="display: flex; flex-direction: column; height: 100%;">
        <div style="flex-grow: 1; overflow-y: auto;" >
            <MudNavMenu class="mt-6">
                <MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="mx-4 my-2">Main Menu</MudText>
                
                @if (_isAuthenticated)
                {
                    @if (_userRole == "Admin")
                    {
                        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">
                            Dashboard
                        </MudNavLink>
                        
                        <MudNavLink Href="/reservations" Icon="@Icons.Material.Filled.CalendarToday">
                            Booking
                        </MudNavLink>
                        
                        <MudNavLink Href="/customers" Icon="@Icons.Material.Filled.People">
                            Customers
                        </MudNavLink>
                        
                        <MudNavLink Href="/staff" Icon="@Icons.Material.Filled.PersonOutline" 
                                   Disabled="@(!_canAccessStaffModule)">
                            Staff
                        </MudNavLink>

                        <MudNavLink Href="/outlets" Icon="@Icons.Material.Filled.Store">
                            Outlet
                        </MudNavLink>
                    }
                    else if (_userRole == "OutletStaff")
                    {
                        <MudNavLink Href="/staff-dashboard" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">
                            Dashboard
                        </MudNavLink>
                        
                        <MudNavLink Href="/staff-customers" Icon="@Icons.Material.Filled.People">
                            Customers
                        </MudNavLink>
                    }

                   
                }
                else
                {
                    <MudNavLink Href="/" Icon="@Icons.Material.Filled.Login">
                        Login
                    </MudNavLink>
                }
            </MudNavMenu>
        </div>
        
        @if (_isAuthenticated && !string.IsNullOrEmpty(_username))
        {
            <div style="margin-top: auto;">
                <MudPaper Class="rounded-lg py-4 px-2 mx-7 mb-2" Style="background-color: #f5f5f5;">
                    <MudStack AlignItems="AlignItems.Center" Spacing="1">
                        <MudAvatar Style="height: 80px; width: 80px; background-color: #aaf0d1;">
                            <MudImage Src="/images/profile.png" Alt="Profile" Class="rounded-circle" />
                        </MudAvatar>
                        <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-2">@_username</MudText>
                        <MudText Typo="Typo.subtitle2" Align="Align.Center" Color="Color.Dark">
                            @_userRole
                        </MudText>
                        <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="HandleLogout">
                            Logout
                        </MudButton>
                    </MudStack>
                </MudPaper>
            </div>
        }
    </div>
</MudDrawer>

@code {
    private bool _drawerOpen = true;
    private bool _canAccessStaffModule = true; // Hardcoded for now
    private bool isLoggingOut = false;
    private bool _isAuthenticated = false;
    private string _username = string.Empty;
    private string _userRole = string.Empty;
    private bool _hasLoadedAuth = false;

    [Parameter]
    public EventCallback<bool> DrawerToggled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is authenticated - WITHOUT using JS interop
            // This is safe during static rendering
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _isAuthenticated = authState?.User?.Identity?.IsAuthenticated ?? false;
            
            if (_isAuthenticated && authState?.User != null)
            {
                _username = authState.User.Identity?.Name ?? string.Empty;
                _userRole = authState.User.FindFirstValue(ClaimTypes.Role) ?? string.Empty;
            }
        }
        catch
        {
            // Swallow any exceptions during static rendering
        }
        
        await base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _hasLoadedAuth = true;
            await UpdateAuthenticationStateWithJS();
            StateHasChanged();
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateAuthenticationStateWithJS()
    {
        try
        {
            // This is safe since we're in OnAfterRenderAsync
            await JS.InvokeVoidAsync("console.log", "Updating auth state in NavMenu");
            
            // Check if user is authenticated using direct service call
            _isAuthenticated = await AuthService.IsUserAuthenticated();
            
            if (_isAuthenticated)
            {
                var userInfo = await TokenService.GetUserInfoFromTokenAsync();
                if (userInfo != null)
                {
                    _username = userInfo.Username;
                    _userRole = userInfo.Role;
                }
            }
            
            await JS.InvokeVoidAsync("console.log", $"NavMenu auth state updated: {_isAuthenticated}");
        }
        catch (Exception ex)
        {
            try
            {
                // Only try to use JS if we're not in static rendering
                if (_hasLoadedAuth)
                {
                    await JS.InvokeVoidAsync("console.error", $"Error updating auth state in NavMenu: {ex.Message}");
                }
            }
            catch
            {
                // Suppress any JS exceptions during render
            }
        }
    }

    public void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
        DrawerToggled.InvokeAsync(_drawerOpen);
    }

    private async Task HandleLogout()
    {
        try
        {
            if (isLoggingOut) return;
            
            isLoggingOut = true;
            await JS.InvokeVoidAsync("console.log", "Logging out...");
            await AuthService.Logout();
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", "Logout error: " + ex.Message);
        }
        finally
        {
            isLoggingOut = false;
        }
    }
}