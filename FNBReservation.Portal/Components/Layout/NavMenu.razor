@using Microsoft.AspNetCore.Components.Authorization
@using FNBReservation.Portal.Services
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JS

<MudDrawer Open="@_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="@DrawerVariant.Mini" 
           DisableOverlay="true" OpenMiniOnHover="true">

    
    <div style="display: flex; flex-direction: column; height: 100%;">
        <div style="flex-grow: 1; overflow-y: auto;" >
            <MudNavMenu class="mt-6">
                <MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="mx-4 my-2">Main Menu</MudText>
                
                <AuthorizeView>
                    <Authorized>
                        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">
                            Dashboard
                        </MudNavLink>
                        
                        <MudNavLink Href="/reservations" Icon="@Icons.Material.Filled.CalendarToday">
                            Booking
                        </MudNavLink>
                        
                        <MudNavLink Href="/customers" Icon="@Icons.Material.Filled.People">
                            Customers
                        </MudNavLink>
                        
                        <MudNavLink Href="/staff" Icon="@Icons.Material.Filled.PersonOutline" 
                                   Disabled="@(!_canAccessStaffModule)">
                            Staff
                        </MudNavLink>
                        
                        <MudNavLink Href="/analytics" Icon="@Icons.Material.Filled.BarChart">
                            Analytics
                        </MudNavLink>
                        <MudNavLink Href="/reservation-dashboard" Icon="@Icons.Material.Filled.EventAvailable">
                            Reservation Dashboard
                        </MudNavLink>

                        <MudNavLink Href="/outlets" Icon="@Icons.Material.Filled.Store">
                            Outlet
                        </MudNavLink>
                        
                        <MudDivider Class="my-2" />
                        
                        <MudText Typo="Typo.subtitle2" Color="Color.Dark" Class="mx-4 my-2">Preferences</MudText>
                        
                        <MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings">
                            Settings
                        </MudNavLink>
                    </Authorized>
                    <NotAuthorized>
                        <MudNavLink Href="/login" Icon="@Icons.Material.Filled.Login">
                            Login
                        </MudNavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </MudNavMenu>
        </div>
        
        <AuthorizeView>
            <Authorized>
                <div style="margin-top: auto;">
                    <MudPaper Class="rounded-lg py-4 px-2 mx-7 mb-2" Style="background-color: #f5f5f5;">
                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                            <MudAvatar Style="height: 80px; width: 80px; background-color: #aaf0d1;">
                                <MudImage Src="/images/profile.jpg" Alt="Profile" Class="rounded-circle" />
                            </MudAvatar>
                            <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-2">@context.User.Identity?.Name</MudText>
                            <MudText Typo="Typo.subtitle2" Align="Align.Center" Color="Color.Dark">
                                @context.User.FindFirst(ClaimTypes.Role)?.Value
                            </MudText>
                            <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="HandleLogout">
                                Logout
                            </MudButton>
                        </MudStack>
                    </MudPaper>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</MudDrawer>

@code {
    private bool _drawerOpen = true;
    private bool _canAccessStaffModule = true; // Hardcoded for now
    private bool isLoggingOut = false;

    [Parameter]
    public EventCallback<bool> DrawerToggled { get; set; }

    public void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
        DrawerToggled.InvokeAsync(_drawerOpen);
    }

    private async Task HandleLogout()
    {
        try
        {
            if (isLoggingOut) return;
            
            isLoggingOut = true;
            await JS.InvokeVoidAsync("console.log", "Logging out...");
            await AuthService.Logout();
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", "Logout error: " + ex.Message);
        }
        finally
        {
            isLoggingOut = false;
        }
    }
}