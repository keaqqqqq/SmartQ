@using Microsoft.AspNetCore.Components.Authorization

<Router AppAssembly="typeof(Program).Assembly">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)">
            <NotAuthorized>
                @if (context.User.Identity?.IsAuthenticated != true)
                {
                    <RedirectToLogin />
                }
                else
                {
                    <p class="alert alert-danger">You are not authorized to access this resource.</p>
                }
            </NotAuthorized>
            <Authorizing>
                <div class="d-flex justify-content-center mt-5">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                </div>
            </Authorizing>
        </AuthorizeRouteView>
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
    <NotFound>
        <LayoutView Layout="typeof(Layout.MainLayout)">
            <MudText Typo="Typo.h4" Class="mb-4">Sorry, there's nothing at this address.</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/">Return Home</MudButton>
        </LayoutView>
    </NotFound>
</Router>

@code {
    public class RedirectToLogin : ComponentBase
    {
        [Inject]
        private NavigationManager NavigationManager { get; set; }

        protected override void OnInitialized()
        {
            NavigationManager.NavigateTo("/login", true);
        }
    }
}
