@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@inject IStaffService StaffService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px">
            <MudText Typo="Typo.h6" Class="mb-4">Add Staff Member for @OutletName</MudText>

            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Name" Label="Full Name" Required="true" RequiredError="Name is required"
                                      Variant="Variant.Outlined" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Username" Label="Username" Required="true" RequiredError="Username is required"
                                      Variant="Variant.Outlined" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="model.Email" Label="Email" Required="true" RequiredError="Email is required"
                                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "Invalid email format"})"
                                      Variant="Variant.Outlined" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="model.PhoneNumber" Label="Phone Number" Required="true"
                                      Variant="Variant.Outlined" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect @bind-Value="model.Role" Label="Role" Required="true" RequiredError="Role is required"
                                   Variant="Variant.Outlined" FullWidth="true">
                            <MudSelectItem Value="@("Manager")">Manager</MudSelectItem>
                            <MudSelectItem Value="@("Host")">Host</MudSelectItem>
                            <MudSelectItem Value="@("Server")">Server</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="model.Password" Label="Password" Required="true" RequiredError="Password is required"
                                      Variant="Variant.Outlined" InputType="InputType.Password" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="model.ConfirmPassword" Label="Confirm Password" Required="true"
                                      Variant="Variant.Outlined" InputType="InputType.Password" FullWidth="true"
                                      Validation="@(new CompareAttribute("Password") {ErrorMessage = "Passwords do not match"})" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="@(!isValid)" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int OutletId { get; set; }

    [Parameter]
    public string OutletName { get; set; }

    private StaffCreateRequest model = new();
    private MudForm form;
    private bool isValid;
    private bool processing;

    protected override void OnInitialized()
    {
        model.OutletId = OutletId;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (processing)
            return;

        processing = true;

        try
        {
            await form.Validate();

            if (isValid)
            {
                var result = await StaffService.CreateStaffAsync(model);
                MudDialog.Close(DialogResult.Ok(result));
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (could display an error message)
            Console.Error.WriteLine($"Error creating staff: {ex.Message}");
        }
        finally
        {
            processing = false;
        }
    }
}
