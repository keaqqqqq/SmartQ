@page "/staff-customers"
@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@using FNBReservation.Portal.Components.Dialogs
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Authorization
@inject ICustomerService CustomerService
@inject CurrentUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Customer Management - F&B Reservation System</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Outlet Customer Management</MudText>

    <MudCard>
        <MudTabs Elevation="0" Rounded="false" ApplyEffectsToContainer="true" PanelClass="pa-0" @bind-ActivePanelIndex="ViewModel.ActiveTabIndex">
            <MudTabPanel Icon="@Icons.Material.Filled.People" Text="ALL CUSTOMERS">
                <MudCardContent Class="pb-0">
                    <div class="d-flex align-center justify-space-between mb-4">
                        <!-- Enhanced search UI -->
                        <MudPaper Elevation="0" Class="d-flex align-center pa-2" Style="background-color: var(--mud-palette-background-grey); flex-grow: 0; max-width: 400px;">
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                            <MudTextField @bind-Value="ViewModel.SearchTerm" Placeholder="Search by name, phone, email..."
                                          Immediate="true" OnDebounceIntervalElapsed="ViewModel.SearchCustomersAsync" DebounceInterval="300"
                                          DisableUnderLine="true" Variant="Variant.Text"
                                          Clearable="true" OnClearButtonClick="ViewModel.ClearSearchAsync" Style="min-width: 300px;"
                                          Class="my-0 py-0"
                                          OnKeyDown="@ViewModel.SearchOnEnterAsync" />
                            <MudIconButton Icon="@Icons.Material.Filled.ClearAll" Color="Color.Default"
                                           OnClick="ViewModel.ClearSearchAsync" Size="Size.Small" Title="Clear search"
                                           Class="ml-1" />
                        </MudPaper>

                        @if (!string.IsNullOrWhiteSpace(ViewModel.SearchTerm))
                        {
                            <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-2" OnClose="ViewModel.ClearSearchAsync" T="string">
                                @($"Search: {ViewModel.SearchTerm}")
                            </MudChip>
                        }
                    </div>

                    <MudTable Items="@ViewModel.AllCustomers" Hover="true" Breakpoint="Breakpoint.Sm"
                              Loading="@ViewModel.IsLoading" LoadingProgressColor="Color.Primary"
                              T="CustomerDto" Class="mb-4" Dense="true">
                        <HeaderContent>
                            <MudTh>Customer</MudTh>
                            <MudTh>Contact</MudTh>
                            <MudTh>Reservations</MudTh>
                            <MudTh>Last Visit</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="customer">
                            <MudTd DataLabel="Customer">
                                <div>@customer.Name</div>
                                <MudText Typo="Typo.caption">ID: @customer.CustomerId</MudText>
                            </MudTd>
                            <MudTd DataLabel="Contact">
                                <div>@customer.PhoneNumber</div>
                                <MudText Typo="Typo.caption">@customer.Email</MudText>
                            </MudTd>
                            <MudTd DataLabel="Reservations">
                                <div>Total: @customer.TotalReservations</div>
                                <MudText Typo="Typo.caption">No-shows: @customer.NoShows</MudText>
                            </MudTd>
                            <MudTd DataLabel="Last Visit">
                                @(customer.LastVisit?.ToString("d/M/yyyy") ?? "Never")
                            </MudTd>
                            <MudTd DataLabel="Status">
                                @if (customer.IsBanned)
                                {
                                    <MudChip Color="Color.Error" Size="Size.Small" Style="height: 24px; font-size: 0.75rem;" T="string">Banned</MudChip>
                                }
                                else
                                {
                                    <div style="width: 80px;" class="pa-0">
                                        <div class="rounded-pill" style="background-color: #00c853; color: white; text-align: center; padding: 3px 8px; font-size: 0.75rem; height: 24px; line-height: 18px;">
                                            Active
                                        </div>
                                    </div>
                                }
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudStack Row="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info"
                                                   OnClick="@(() => ViewCustomerDetails(customer))" />

                                    @if (!customer.IsBanned)
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.Block" Color="Color.Error"
                                                       OnClick="@(() => OpenBanCustomerDialog(customer))" />
                                    }
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText Align="Align.Center">No customers found.</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudTabPanel>

            <MudTabPanel Icon="@Icons.Material.Filled.CheckCircle" Text="ACTIVE CUSTOMERS">
                <MudCardContent Class="pb-0">
                    <div class="d-flex align-center justify-space-between mb-4">
                        <!-- Enhanced search UI -->
                        <MudPaper Elevation="0" Class="d-flex align-center pa-2" Style="background-color: var(--mud-palette-background-grey); flex-grow: 0; max-width: 400px;">
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                            <MudTextField @bind-Value="ViewModel.SearchTerm" Placeholder="Search by name, phone, email..."
                                          Immediate="true" OnDebounceIntervalElapsed="ViewModel.SearchCustomersAsync" DebounceInterval="300"
                                          DisableUnderLine="true" Variant="Variant.Text"
                                          Clearable="true" OnClearButtonClick="ViewModel.ClearSearchAsync" Style="min-width: 300px;"
                                          Class="my-0 py-0"
                                          OnKeyDown="@ViewModel.SearchOnEnterAsync" />
                            <MudIconButton Icon="@Icons.Material.Filled.ClearAll" Color="Color.Default"
                                           OnClick="ViewModel.ClearSearchAsync" Size="Size.Small" Title="Clear search"
                                           Class="ml-1" />
                        </MudPaper>

                        @if (!string.IsNullOrWhiteSpace(ViewModel.SearchTerm))
                        {
                            <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-2" OnClose="ViewModel.ClearSearchAsync" T="string">
                                @($"Search: {ViewModel.SearchTerm}")
                            </MudChip>
                        }
                    </div>

                    <MudTable Items="@ViewModel.ActiveCustomers" Hover="true" Breakpoint="Breakpoint.Sm"
                              Loading="@ViewModel.IsLoading" LoadingProgressColor="Color.Primary"
                              T="CustomerDto" Class="mb-4" Dense="true">
                        <HeaderContent>
                            <MudTh>Customer</MudTh>
                            <MudTh>Contact</MudTh>
                            <MudTh>Reservations</MudTh>
                            <MudTh>Last Visit</MudTh>
                            <MudTh>Status</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="customer">
                            <MudTd DataLabel="Customer">
                                <div>@customer.Name</div>
                                <MudText Typo="Typo.caption">ID: @customer.CustomerId</MudText>
                            </MudTd>
                            <MudTd DataLabel="Contact">
                                <div>@customer.PhoneNumber</div>
                                <MudText Typo="Typo.caption">@customer.Email</MudText>
                            </MudTd>
                            <MudTd DataLabel="Reservations">
                                <div>Total: @customer.TotalReservations</div>
                                <MudText Typo="Typo.caption">No-shows: @customer.NoShows</MudText>
                            </MudTd>
                            <MudTd DataLabel="Last Visit">
                                @(customer.LastVisit?.ToString("d/M/yyyy") ?? "Never")
                            </MudTd>
                            <MudTd DataLabel="Status">
                                <div style="width: 80px;" class="pa-0">
                                    <div class="rounded-pill" style="background-color: #00c853; color: white; text-align: center; padding: 3px 8px; font-size: 0.75rem; height: 24px; line-height: 18px;">
                                        Active
                                    </div>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudStack Row="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info"
                                                   OnClick="@(() => ViewCustomerDetails(customer))" />

                                    <MudIconButton Icon="@Icons.Material.Filled.Block" Color="Color.Error"
                                                   OnClick="@(() => OpenBanCustomerDialog(customer))" />
                                </MudStack>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText Align="Align.Center">No active customers found.</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
            </MudTabPanel>

            <MudTabPanel Icon="@Icons.Material.Filled.Block" Text="BANNED CUSTOMERS">
                <MudCardContent Class="pb-0">
                    <div class="d-flex align-center justify-space-between mb-4">
                        <!-- Enhanced search UI -->
                        <MudPaper Elevation="0" Class="d-flex align-center pa-2" Style="background-color: var(--mud-palette-background-grey); flex-grow: 0; max-width: 400px;">
                            <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                            <MudTextField @bind-Value="ViewModel.SearchTerm" Placeholder="Search by name, phone, email..."
                                          Immediate="true" OnDebounceIntervalElapsed="ViewModel.SearchCustomersAsync" DebounceInterval="300"
                                          DisableUnderLine="true" Variant="Variant.Text"
                                          Clearable="true" OnClearButtonClick="ViewModel.ClearSearchAsync" Style="min-width: 300px;"
                                          Class="my-0 py-0"
                                          OnKeyDown="@ViewModel.SearchOnEnterAsync" />
                            <MudIconButton Icon="@Icons.Material.Filled.ClearAll" Color="Color.Default"
                                           OnClick="ViewModel.ClearSearchAsync" Size="Size.Small" Title="Clear search"
                                           Class="ml-1" />
                        </MudPaper>

                        @if (!string.IsNullOrWhiteSpace(ViewModel.SearchTerm))
                        {
                            <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-2" OnClose="ViewModel.ClearSearchAsync" T="string">
                                @($"Search: {ViewModel.SearchTerm}")
                            </MudChip>
                        }
                    </div>

                    <!-- Debug information -->
                    @if (ViewModel.BannedCustomers.Count > 0)
                    {
                        <MudText Typo="Typo.caption" Class="mb-2">Found @ViewModel.BannedCustomers.Count banned customers</MudText>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="mb-2">No banned customers found in the data. Count: @ViewModel.BannedCustomers.Count</MudAlert>
                    }

                    <MudTable Items="@ViewModel.BannedCustomers" Hover="true" Breakpoint="Breakpoint.Sm"
                              Loading="@ViewModel.IsLoading" LoadingProgressColor="Color.Primary"
                              T="CustomerDto" Class="mb-4" Dense="true">
                        <HeaderContent>
                            <MudTh>Customer</MudTh>
                            <MudTh>Reason</MudTh>
                            <MudTh>Banned At</MudTh>
                            <MudTh>Duration</MudTh>
                            <MudTh>Banned By</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="customer">
                            <MudTd DataLabel="Customer">
                                <div>@customer.Name</div>
                                <MudText Typo="Typo.caption">@customer.PhoneNumber</MudText>
                            </MudTd>
                            <MudTd DataLabel="Reason">
                                @(customer.BanReason ?? "Not specified")
                            </MudTd>
                            <MudTd DataLabel="Banned At">
                                @(customer.BannedDate?.ToString("d/M/yyyy") ?? "Unknown")
                            </MudTd>
                            <MudTd DataLabel="Duration">
                                @if (customer.BanExpiryDate.HasValue)
                                {
                                    <span>Until @customer.BanExpiryDate.Value.ToString("d/M/yyyy")</span>
                                }
                                else
                                {
                                    <span>Permanent</span>
                                }
                            </MudTd>
                            <MudTd DataLabel="Banned By">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-1" />
                                    <span>@(customer.BannedBy ?? "Unknown")</span>
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButton Color="Color.Primary" Variant="Variant.Text" Size="Size.Small"
                                           OnClick="@(() => UnbanCustomer(customer))">
                                    Remove Ban
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText Align="Align.Center">No banned customers found.</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 5, 10, 25 }" />
                        </PagerContent>
                    </MudTable>

                    <!-- Additional debug info -->
                    @if (ViewModel.BannedCustomers.Count > 0)
                    {
                        <MudExpansionPanels Style="margin-bottom: 16px;">
                            <MudExpansionPanel Text="Debug Information (Banned Customers Data)">
                                <MudText Typo="Typo.body2">Count: @ViewModel.BannedCustomers.Count</MudText>
                                @foreach (var customer in ViewModel.BannedCustomers)
                                {
                                    <MudDivider Class="my-2" />
                                    <MudText Typo="Typo.body2">Name: @customer.Name</MudText>
                                    <MudText Typo="Typo.body2">ID: @customer.CustomerId</MudText>
                                    <MudText Typo="Typo.body2">IsBanned: @customer.IsBanned</MudText>
                                    <MudText Typo="Typo.body2">Reason: @(customer.BanReason ?? "N/A")</MudText>
                                    <MudText Typo="Typo.body2">BannedDate: @(customer.BannedDate?.ToString() ?? "N/A")</MudText>
                                    <MudText Typo="Typo.body2">BannedBy: @(customer.BannedBy ?? "N/A")</MudText>
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }
                </MudCardContent>
            </MudTabPanel>
        </MudTabs>
    </MudCard>
</MudContainer>

@code {
    // Use the ViewModel to handle all logic
    private StaffCustomerViewModel ViewModel { get; set; }

    protected override void OnInitialized()
    {
        // Initialize ViewModel with all required services
        ViewModel = new StaffCustomerViewModel(
            CustomerService,
            UserService,
            JSRuntime,
            Snackbar,
            DialogService
        );
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("console.log", "StaffCustomer component initialized");
            await ViewModel.InitializeAsync();
            StateHasChanged();
        }
    }

    private async Task OpenBanCustomerDialog(CustomerDto customer)
    {
        var parameters = new DialogParameters
        {
            ["Customer"] = customer,
            ["CurrentUser"] = ViewModel.CurrentUsername
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowAsync<BanCustomerDialog>("Ban Customer", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ViewModel.LoadCustomersAsync();
        }
    }

    private async Task UnbanCustomer(CustomerDto customer)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to remove the ban for <b>{customer.Name}</b>? This will allow them to make reservations again.",
            ["ButtonText"] = "Remove Ban",
            ["Color"] = Color.Success
        };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Unban", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await ViewModel.UnbanCustomerAsync(customer.CustomerId);
        }
    }

    private async Task ViewCustomerDetails(CustomerDto customer)
    {
        var customerDetails = await ViewModel.GetCustomerDetailsAsync(customer.CustomerId);
        
        if (customerDetails == null)
        {
            return;
        }
        
        var parameters = new DialogParameters
        {
            ["CustomerId"] = customer.CustomerId,
            ["CurrentUser"] = ViewModel.CurrentUsername
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<CustomerDetailsDialog>("Customer Details", parameters, options);
        var result = await dialog.Result;

        // Refresh data after dialog is closed in case any changes were made
        if (!result.Canceled)
        {
            await ViewModel.LoadCustomersAsync();
        }
    }
}