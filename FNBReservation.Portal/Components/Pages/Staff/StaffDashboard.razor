@page "/staff-dashboard"
@using System.Linq
@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@using Microsoft.AspNetCore.Authorization
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS
@inject JwtTokenService TokenService
@inject IReservationService ReservationService
@inject CurrentUserService CurrentUserService
@inject IOutletService OutletService
@inject ITableService TableService
@inject IQueueService QueueService
@inject ITableOccupancyService TableOccupancyService
@rendermode InteractiveServer


<PageTitle>Outlet Dashboard - F&B Reservation System</PageTitle>

<style>
    .summary-card {
        border-radius: 12px;
        transition: all 0.2s ease;
        height: 100%;
    }

    .table-card {
        margin-bottom: 1rem;
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
        height: 100%;
    }

        .table-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--mud-elevation-10);
        }

    .table-header {
        background-color: var(--mud-palette-surface);
        padding: 10px 16px;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .time-indicator {
        position: absolute;
        top: 0;
        right: 0;
        padding: 4px 10px;
        border-bottom-left-radius: 8px;
        color: white;
        font-size: 0.8rem;
        font-weight: 500;
    }

        .time-indicator.primary {
            background-color: var(--mud-palette-primary);
        }

        .time-indicator.secondary {
            background-color: var(--mud-palette-secondary);
        }

        .time-indicator.warning {
            background-color: var(--mud-palette-warning);
        }

    .customer-info {
        padding: 16px;
        position: relative;
    }

    .table-tabs .mud-tabs-toolbar {
        background-color: var(--mud-palette-primary);
        border-radius: 4px 4px 0 0;
    }

    .table-tabs .mud-tab {
        color: white;
    }

        .table-tabs .mud-tab.mud-selected {
            color: white;
            font-weight: 500;
        }

    .status-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1;
    }

    .queue-card {
        border-radius: 10px;
        background-color: #ffe6c2;
        color: rgba(0,0,0,0.8);
        margin-bottom: 1rem;
        transition: all 0.2s ease;
        position: relative;
        overflow: hidden;
    }

        .queue-card:hover {
            transform: translateX(3px);
        }

    .waiting-time {
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: rgba(255,255,255,0.3);
        color: rgba(0,0,0,0.7);
        padding: 2px 10px;
        border-radius: 30px;
        font-weight: 500;
        font-size: 0.8rem;
    }

    .action-buttons {
        position: absolute;
        bottom: 10px;
        right: 10px;
    }

    .mud-tabs-panels {
        padding: 0 !important;
    }

    .table-number {
        display: inline-block;
        width: 32px;
        height: 32px;
        line-height: 32px;
        text-align: center;
        color: white;
        border-radius: 4px;
        font-weight: bold;
        margin-right: 8px;
    }

    .table-primary {
        background-color: var(--mud-palette-primary);
    }

    .table-success {
        background-color: var(--mud-palette-success);
    }

    .table-secondary {
        background-color: var(--mud-palette-secondary);
    }

    .quick-action-btn {
        border-radius: 20px;
        text-transform: none;
    }

    .action-btn {
        border-radius: 4px;
        text-transform: none;
        margin-top: 8px;
    }

    .header-icon {
        padding: 8px;
        border-radius: 8px;
        margin-right: 12px;
    }

    .bg-light-primary {
        background-color: rgba(var(--mud-palette-primary-rgb), 0.1);
    }

    .bg-light-secondary {
        background-color: rgba(var(--mud-palette-secondary-rgb), 0.1);
    }

    .bg-light-success {
        background-color: rgba(var(--mud-palette-success-rgb), 0.1);
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 px-0">
    @if(IsLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else
    {
    <!-- Header Section -->
    <div class="d-flex align-center justify-space-between mb-4">
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Dashboard" Size="Size.Large" Color="Color.Primary" Class="mr-3" />
            <div>
                <MudText Typo="Typo.h4">Outlet Dashboard</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @DateTime.Now.ToString("dddd, MMMM d, yyyy") | @_outletName
                </MudText>
            </div>
        </div>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Refresh" 
                      OnClick="RefreshData">
                Refresh
            </MudButton>
    </div>

    <!-- Summary Cards -->
    <MudGrid Class="mb-4">
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="summary-card pa-4">
                <div class="d-flex justify-space-between">
                    <div>
                        <MudText Typo="Typo.overline">ACTIVE TABLES</MudText>
                        <MudText Typo="Typo.h2" Color="Color.Secondary">
                                @(_todayReservations.Count(r => r.Status == "Seated"))
                        </MudText>
                        <MudText Typo="Typo.body2">
                                Occupancy Rate: @GetOccupancyRate()%
                        </MudText>
                    </div>
                    <MudIcon Icon="@Icons.Material.Filled.TableBar" Color="Color.Surface" Size="Size.Large" />
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="summary-card pa-4">
                <div class="d-flex justify-space-between">
                    <div>
                        <MudText Typo="Typo.overline">IN QUEUE</MudText>
                        <MudText Typo="Typo.h2" Color="Color.Warning">@_waitingQueue.Count</MudText>
                        <MudText Typo="Typo.body2">
                            Avg. Wait Time: @GetAverageWaitTime()
                        </MudText>
                    </div>
                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="Color.Surface" Size="Size.Large" />
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="summary-card pa-4">
                <div class="d-flex justify-space-between">
                    <div>
                        <MudText Typo="Typo.overline">AVAILABLE TABLES</MudText>
                        <MudText Typo="Typo.h2" Color="Color.Success">
                                @(_reservationTables.Count(t => t.Status?.ToLower() == "available"))
                        </MudText>
                        <MudText Typo="Typo.body2">
                            Ready for Seating
                        </MudText>
                    </div>
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Surface" Size="Size.Large" />
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="summary-card pa-4">
                <div class="d-flex justify-space-between">
                    <div>
                        <MudText Typo="Typo.overline">TODAY'S RESERVATIONS</MudText>
                        <MudText Typo="Typo.h2" Color="Color.Info">
                                @(_todayReservations.Count)
                        </MudText>
                        <MudText Typo="Typo.body2">
                                @(_todayReservations.Count(r => r.Status == "Confirmed")) Upcoming
                        </MudText>
                    </div>
                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Surface" Size="Size.Large" />
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <!-- Floor Layout Section -->
        <MudItem xs="12" lg="9">
            <MudCard Elevation="2" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <div class="header-icon bg-light-primary">
                            <MudIcon Icon="@Icons.Material.Filled.Map" Color="Color.Primary" />
                        </div>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Floor Layout</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Manage tables and reservations
                        </MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Size="Size.Small" OnClick="RefreshData" />
                    </CardHeaderActions>
                </MudCardHeader>

                <MudCardContent Class="pa-0">
                    <MudTabs Elevation="0" Color="Color.Primary" Class="table-tabs">
                        <MudTabPanel Text="RESERVATION TABLES" Icon="@Icons.Material.Filled.CalendarToday">
                            <div class="pa-4">
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                    Displaying @_reservationTables.Count tables |
                                    @_reservationTables.Count(t => t.Status?.ToLower() == "occupied") occupied,
                                    @_reservationTables.Count(t => t.Status?.ToLower() == "available") available
                                </MudText>

                                <MudGrid>
                                    @foreach (var table in _reservationTables)
                                    {
                                        <MudItem xs="12" md="6">
                                            <MudPaper Elevation="3" Class="table-card">
                                                @if (table.Status?.ToLower() == "occupied")
                                                {
                                                    var reservation = _todayReservations.FirstOrDefault(r => 
                                                        r.Status == "Seated" && 
                                                        r.TableNumbers != null &&
                                                        r.TableNumbers.Any(t => t == table.TableNumber));
                                                    
                                                    <div class="time-indicator primary">
                                                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-1" />
                                                        Occupied
                                                    </div>
                                                }
                                                else if (_todayReservations.Any(r => r.Status == "Confirmed" && r.TableNumbers != null && r.TableNumbers.Any(t => t == table.TableNumber)))
                                                {
                                                    <div class="status-indicator">
                                                        <MudChip Color="Color.Success" Size="Size.Small" Label="true" T="string">Available</MudChip>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="status-indicator">
                                                        <MudChip Color="Color.Success" Size="Size.Small" Label="true" T="string">Available</MudChip>
                                                    </div>
                                                }

                                                <div class="table-header d-flex align-center">
                                                    <span class="table-number @(table.Status?.ToLower() == "occupied" ? "table-primary" : "table-success")">
                                                        @(!string.IsNullOrEmpty(table.TableNumber) ? table.TableNumber.Substring(Math.Max(0, table.TableNumber.Length - 2)) : "")
                                                    </span>
                                                    <div>
                                                        <MudText Typo="Typo.subtitle1">Table @table.TableNumber</MudText>
                                                        <MudText Typo="Typo.caption" Class="d-flex align-center">
                                                            <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small" Class="mr-1" />
                                                            Capacity: @table.Capacity
                                                        </MudText>
                                                    </div>
                                                </div>

                                                @if (table.Status?.ToLower() == "occupied")
                                                {
                                                    var reservation = _todayReservations.FirstOrDefault(r => 
                                                        r.Status == "Seated" && 
                                                        r.TableNumbers != null &&
                                                        r.TableNumbers.Any(t => t == table.TableNumber));
                                                    
                                                    <div class="customer-info bg-light-primary">
                                                        @if (reservation != null)
                                                        {
                                                            <MudText Typo="Typo.subtitle1">@reservation.CustomerName</MudText>
                                                        <div class="d-flex align-center mt-2">
                                                            <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2" Class="mr-3">@reservation.PartySize guests</MudText>

                                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2">@reservation.ReservationDate.AddHours(8).ToString("h:mm tt")</MudText>
                                                        </div>
                                                        <div class="d-flex align-center mt-1">
                                                            <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2">@reservation.CustomerPhone</MudText>
                                                        </div>

                                                        <div class="d-flex gap-2 mt-3">
                                                            <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true"
                                                                       Class="quick-action-btn" Size="Size.Small"
                                                                          OnClick="@(() => HandleCompletedReservation(reservation.ReservationId))">
                                                                    Complete
                                                                </MudButton>
                                                            <MudButton Variant="Variant.Outlined" Color="Color.Error" FullWidth="true"
                                                                       Class="quick-action-btn" Size="Size.Small"
                                                                          OnClick="@(() => HandleNoShow(reservation.ReservationId))">
                                                                    No-show
                                                                </MudButton>
                                                        </div>
                                                        }
                                                        else
                                                        {
                                                            <MudText Typo="Typo.subtitle1" Align="Align.Center">Occupied</MudText>
                                                            <MudText Typo="Typo.caption" Align="Align.Center">No reservation details found</MudText>
                                                        }
                                                    </div>
                                                }

                                                <MudDivider />

                                                <div class="customer-info">
                                                    <MudText Typo="Typo.subtitle2">Upcoming Reservation</MudText>

                                                    @{
                                                        var upcomingReservation = _todayReservations.FirstOrDefault(r => 
                                                            r.Status == "Confirmed" && 
                                                            r.TableNumbers != null &&
                                                            r.TableNumbers.Any(t => t == table.TableNumber));
                                                    }

                                                    @if (upcomingReservation != null)
                                                    {
                                                        <div class="mt-3">
                                                            <MudText Typo="Typo.subtitle2">@upcomingReservation.CustomerName</MudText>
                                                            <div class="d-flex align-center mt-1">
                                                                <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.caption" Class="mr-3">@upcomingReservation.PartySize guests</MudText>

                                                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.caption">@upcomingReservation.ReservationDate.AddHours(8).ToString("h:mm tt")</MudText>
                                                            </div>
                                                            <div class="d-flex align-center mt-1">
                                                                <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2">@upcomingReservation.CustomerPhone</MudText>
                                                            </div>
                                                            <div class="d-flex gap-2 mt-3">
                                                                <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true"
                                                                           Class="quick-action-btn" Size="Size.Small"
                                                                          OnClick="@(() => HandleCompletedReservation(upcomingReservation.ReservationId))">
                                                                    Complete
                                                                </MudButton>
                                                                <MudButton Variant="Variant.Outlined" Color="Color.Error" FullWidth="true"
                                                                           Class="quick-action-btn" Size="Size.Small"
                                                                          OnClick="@(() => HandleNoShow(upcomingReservation.ReservationId))">
                                                                    No-show
                                                                </MudButton>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.caption" Class="text-disabled font-italic mt-2">
                                                            No upcoming reservations
                                                        </MudText>
                                                    }
                                                </div>
                                            </MudPaper>
                                        </MudItem>
                                    }
                                    
                                    @if (_reservationTables.Count == 0)
                                    {
                                        <MudItem xs="12">
                                            <MudAlert Severity="Severity.Info" Class="my-2">No tables found.</MudAlert>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </div>
                        </MudTabPanel>

                        <MudTabPanel Text="QUEUE TABLES" Icon="@Icons.Material.Filled.RestaurantMenu">
                            <div class="pa-4">
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                                    Displaying @_queueTables.Count queue tables |
                                    @_queueTables.Count(t => t.Status?.ToLower() == "occupied") occupied,
                                    @_queueTables.Count(t => t.Status?.ToLower() == "available") available
                                </MudText>

                                <MudGrid>
                                    @foreach (var table in _queueTables)
                                    {
                                        <MudItem xs="12" md="6">
                                            <MudPaper Elevation="3" Class="table-card">
                                                @if (table.Status?.ToLower() == "occupied")
                                                {
                                                    <div class="time-indicator warning">
                                                        <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-1" />
                                                        Occupied
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="status-indicator">
                                                        <MudChip Color="Color.Success" Size="Size.Small" Label="true" T="string">Available</MudChip>
                                                    </div>
                                                }

                                                <div class="table-header d-flex align-center">
                                                    <span class="table-number @(table.Status?.ToLower() == "occupied" ? "table-secondary" : "table-success")">
                                                        @(!string.IsNullOrEmpty(table.TableNumber) ? table.TableNumber.Substring(Math.Max(0, table.TableNumber.Length - 2)) : "")
                                                    </span>
                                                    <div>
                                                        <MudText Typo="Typo.subtitle1">Table @table.TableNumber</MudText>
                                                        <MudText Typo="Typo.caption" Class="d-flex align-center">
                                                            <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small" Class="mr-1" />
                                                            Capacity: @table.Capacity
                                                        </MudText>
                                                    </div>
                                                </div>

                                                @if (table.Status?.ToLower() == "occupied")
                                                {
                                                    @if (_queueTableOccupancy.TryGetValue(table.TableId, out var queueInfo))
                                                    {
                                                        <div class="customer-info bg-light-secondary">
                                                            <MudText Typo="Typo.subtitle1">@queueInfo.CustomerName</MudText>
                                                            <div class="d-flex align-center mt-2">
                                                                <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2" Class="mr-3">@queueInfo.PartySize guests</MudText>

                                                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2">@queueInfo.QueuedAt.AddHours(8).ToString("h:mm tt")</MudText>
                                                            </div>
                                                            <div class="d-flex align-center mt-1">
                                                                <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-1" />
                                                                <MudText Typo="Typo.body2">@queueInfo.CustomerPhone</MudText>
                                                            </div>

                                                            <div class="d-flex gap-2 mt-3">
                                                                @if (queueInfo.Status?.ToLower() == "seated")
                                                                {
                                                                    <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true"
                                                                               Class="quick-action-btn" Size="Size.Small"
                                                                               OnClick="@(() => HandleCompleteQueue(queueInfo.QueueId))">
                                                                        Complete
                                                                    </MudButton>
                                                                }
                                                                else
                                                                {
                                                                    <MudButton Variant="Variant.Filled" Color="Color.Success" FullWidth="true"
                                                                               Class="quick-action-btn" Size="Size.Small"
                                                                               OnClick="@(() => MarkQueueAsSeated(queueInfo.QueueId))">
                                                                        Seated
                                                                    </MudButton>
                                                                }
                                                                <MudButton Variant="Variant.Outlined" Color="Color.Error" FullWidth="true"
                                                                           Class="quick-action-btn" Size="Size.Small"
                                                                               OnClick="@(() => HandleCancel(queueInfo.QueueId))">
                                                                    Cancel
                                                                </MudButton>
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="customer-info bg-light-secondary">
                                                            <MudText Typo="Typo.subtitle1" Align="Align.Center">Occupied</MudText>
                                                            <MudText Typo="Typo.caption" Align="Align.Center">No queue details found</MudText>
                                                        </div>
                                                    }
                                                }
                                                else
                                                {
                                                    <div class="customer-info">
                                                        <div class="d-flex gap-2 mt-1">
                                                            <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                                                                    Class="quick-action-btn" Size="Size.Small"
                                                                    OnClick="@(() => HandleCallNext(table.TableId))">
                                                                Call Next
                                                            </MudButton>
                                                        </div>
                                                        <div class="d-flex gap-2 mt-2">
                                                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" FullWidth="true"
                                                                    Class="quick-action-btn" Size="Size.Small"
                                                                    OnClick="@(() => HandleAssignTable(table.TableId))">
                                                                Assign Table
                                                            </MudButton>
                                                        </div>
                                                        <div class="d-flex gap-2 mt-2">
                                                            <MudButton Variant="Variant.Text" Color="Color.Info" FullWidth="true"
                                                                    Class="quick-action-btn" Size="Size.Small"
                                                                    OnClick="@(() => HandleTableRecommendation(table.TableId))">
                                                                Get Recommendations
                                                            </MudButton>
                                                        </div>
                                                    </div>
                                                }
                                            </MudPaper>
                                        </MudItem>
                                    }
                                    
                                    @if (_queueTables.Count == 0)
                                    {
                                        <MudItem xs="12">
                                            <MudAlert Severity="Severity.Info" Class="my-2">No queue tables found.</MudAlert>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </div>
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Right Sidebar - Waiting Queue Panel -->
        <MudItem xs="12" lg="3">
            <MudCard Elevation="2" Class="mb-4">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudBadge Content="@_waitingQueue.Count" Color="Color.Warning" Overlap="true" Bordered="true">
                            <MudIcon Icon="@Icons.Material.Filled.Queue" Color="Color.Warning" Size="Size.Medium" />
                        </MudBadge>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Waiting Queue</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Size="Size.Small" OnClick="RefreshData" />
                    </CardHeaderActions>
                </MudCardHeader>

                <MudCardContent Style="max-height: 550px; overflow-y: auto;" Class="px-2 py-2">
                    @if (_waitingQueue.Count > 0)
                    {
                        @for (int i = 0; i < _waitingQueue.Count; i++)
                        {
                            var queueEntry = _waitingQueue[i];
                            var index = i; // Capture for lambda

                            <MudPaper Elevation="3" Class="mb-3 rounded-lg overflow-hidden" Style="background-color: #FFF6E5;">
                                <div class="position-relative">
                                    <!-- Queue Number and Tag -->
                                    <div class="d-flex align-center px-3 py-2" Style="background-color: #FFA726;">
                                        <MudText Typo="Typo.h6" Style="color: white;">@queueEntry.CustomerName</MudText>
                                        <MudSpacer />
                                        <div class="d-flex align-center">
                                            <MudChip Size="Size.Small" T="string" Color="Color.Default" Style="background-color: white; color: #212121; font-weight: bold;">
                                                @queueEntry.QueueCode
                                            </MudChip>
                                            @if (i == 0)
                                            {
                                                <MudChip Size="Size.Small" T="string" Label="true" Color="Color.Success" Class="ml-1">Next</MudChip>
                                            }
                                        </div>
                                    </div>

                                    <!-- Customer information -->
                                    <div class="px-3 py-3">
                                        <div class="d-flex justify-space-between align-center mb-2">
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Size="Size.Small" Class="mr-1" />
                                                <MudText Typo="Typo.body1">@queueEntry.PartySize guests</MudText>
                                            </div>
                                            <div class="d-flex align-center">
                                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Class="mr-1" />
                                                <MudText Typo="Typo.body1" Style="font-weight: bold; color: #E65100;">
                                                    @GetQueueWaitingTime(queueEntry.QueuedAt) / @queueEntry.EstimatedWaitMinutes min
                                                </MudText>
                                            </div>
                                        </div>

                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Class="mr-1" />
                                            <MudText Typo="Typo.body2">@queueEntry.CustomerPhone</MudText>
                                        </div>

                                        @if (!string.IsNullOrEmpty(queueEntry.Notes))
                                        {
                                            <div class="d-flex align-center mt-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Notes" Size="Size.Small" Class="mr-1" />
                                                <MudText Typo="Typo.caption" Style="font-style: italic;">@queueEntry.Notes</MudText>
                                            </div>
                                        }

                                        <div class="d-flex justify-end mt-2">
                                            <MudButton Variant="Variant.Filled" Color="Color.Error" 
                                                      Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete"
                                                      OnClick="@(() => RemoveFromQueue(index))">
                                                Remove
                                            </MudButton>
                                        </div>
                                    </div>
                                </div>
                            </MudPaper>
                        }
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Class="mb-4">No customers are currently waiting in queue</MudAlert>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    }
</MudContainer>

@code {
    private bool IsLoading = true;
    private string _outletId = string.Empty;
    private string _outletName = "Loading...";
    private string _outletUUID = string.Empty;
    private int _totalTables = 20; // Default value
    private List<ReservationDto> _todayReservations = new List<ReservationDto>();
    private List<FNBReservation.Portal.Models.TableTypeInfo> _reservationTables = new List<FNBReservation.Portal.Models.TableTypeInfo>();
    private List<QueueEntryDto> _waitingQueue = new List<QueueEntryDto>();
    private List<FNBReservation.Portal.Models.TableTypeInfo> _queueTables = new List<FNBReservation.Portal.Models.TableTypeInfo>();
    private Dictionary<string, QueueEntryDto> _queueTableOccupancy = new Dictionary<string, QueueEntryDto>();
    private List<TableRecommendationDto> _currentRecommendations = new List<TableRecommendationDto>();
    private QueueEntryDto _selectedQueueEntry = null;
    private FNBReservation.Portal.Models.TableTypeInfo _selectedTable = null;
    private bool _isFirstRender = true;
    private Exception _loadingError = null;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get current user's outlet ID
            _outletId = await CurrentUserService.GetCurrentOutletIdAsync() ?? string.Empty;
            
            // If no outlet ID is found, set a default
            if (string.IsNullOrEmpty(_outletId))
            {
                // Use a default outlet ID for testing if needed
                _outletId = "1"; 
            }
        }
        catch (Exception ex)
        {
            _loadingError = ex;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Now we can safely make JS interop calls
                await JS.InvokeVoidAsync("console.log", "Hello from C#! 🚀 Dashboard initialized, loading data");
                
                if (_loadingError != null)
                {
                    await JS.InvokeVoidAsync("console.log", $"Error during initialization: {_loadingError.Message}");
                    Snackbar.Add($"Error loading dashboard: {_loadingError.Message}", Severity.Error);
                    return;
                }
                
                if (string.IsNullOrEmpty(_outletId))
                {
                    await JS.InvokeVoidAsync("console.log", "No outlet ID found for current user. Using default outlet ID: 1");
                }
                
                IsLoading = true;
                StateHasChanged();
                
                await LoadOutletInfo();
                await LoadTables();
                await LoadQueueTables();
                await RefreshData();
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.log", $"Error initializing dashboard: {ex.Message}");
                Snackbar.Add($"Error loading dashboard: {ex.Message}", Severity.Error);
            }
            finally
            {
                IsLoading = false;
                StateHasChanged();
            }
        }
    }
    
    private async Task LoadOutletInfo()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", $"API CALL: GetOutletByIdAsync with ID: {_outletId}");
            var outlet = await OutletService.GetOutletByIdAsync(_outletId);
            
            if (outlet != null)
            {
                _outletName = outlet.Name;
                _outletUUID = outlet.OutletId; // This should be the UUID needed for API calls
                _totalTables = outlet.Tables?.Count ?? 20;
                
                await JS.InvokeVoidAsync("console.log", $"API RESPONSE: Loaded outlet: {_outletName}, UUID: {_outletUUID}, Tables: {_totalTables}");
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", $"API RESPONSE: Could not find outlet with ID: {_outletId}");
                
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading outlet info: {ex.Message}");
            Snackbar.Add("Error loading outlet information.", Severity.Error);
        }
    }

    private async Task LoadTables()
    {
        try
        {
            // Use outletId instead of outletUUID
            if (string.IsNullOrEmpty(_outletId))
            {
                await JS.InvokeVoidAsync("console.log", "Outlet ID is null or empty, cannot load tables.");
                return;
            }
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: GetTableTypesByOutletIdAsync with outletId: {_outletId}, tableType: reservation");
            
            // Call the API to get reservation tables using outletId
            var serviceTables = await TableService.GetTableTypesByOutletIdAsync(_outletId, "reservation");
            
            // Convert the service TableTypeInfo to model TableTypeInfo
            _reservationTables = ConvertServiceToModelTableTypeInfo(serviceTables);
            
            // Log the table data for debugging
            await JS.InvokeVoidAsync("console.log", $"API RESPONSE: Received {_reservationTables.Count} tables");
            
            // Update total tables
            _totalTables = _reservationTables.Count > 0 ? _reservationTables.Count : 20;
            
            // Match reservations with tables
            await MatchReservationsWithTables();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading tables: {ex.Message}");
            Snackbar.Add($"Error loading tables: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadQueueTables()
    {
        try
        {
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            if (string.IsNullOrEmpty(effectiveOutletId))
            {
                await JS.InvokeVoidAsync("console.log", "Both Outlet UUID and outletId are null or empty, cannot load queue tables.");
                return;
            }
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: GetQueueTablesAsync with outletId: {effectiveOutletId}");
            
            // Retrieve persisted occupancy data from the TableOccupancyService
            var persistedOccupancy = TableOccupancyService.GetQueueTableOccupancy(effectiveOutletId);
            var persistedStatuses = TableOccupancyService.GetTableStatuses(effectiveOutletId);
            
            await JS.InvokeVoidAsync("console.log", $"Retrieved {persistedOccupancy.Count} occupancy records from TableOccupancyService");
            
            // Store existing table statuses before making API call
            var existingTableStatuses = _queueTables
                .Where(t => t.Status?.ToLower() == "occupied")
                .ToDictionary(t => t.TableId, t => "occupied");
                
            // Call the API to get queue tables
            var serviceTables = await QueueService.GetQueueTablesAsync(effectiveOutletId);
            
            // Convert the service TableTypeInfo to model TableTypeInfo
            var updatedTables = ConvertServiceToModelTableTypeInfo(serviceTables);
            
            // Apply persisted statuses first
            foreach (var table in updatedTables)
            {
                if (persistedStatuses.TryGetValue(table.TableId, out var status))
                {
                    table.Status = status;
                    await JS.InvokeVoidAsync("console.log", $"Applied persisted status '{status}' to table {table.TableNumber}");
                }
                else if (existingTableStatuses.ContainsKey(table.TableId))
                {
                    table.Status = "occupied";
                }
            }
            
            // Now update the reference
            _queueTables = updatedTables;
            
            await JS.InvokeVoidAsync("console.log", $"API RESPONSE: Received {_queueTables.Count} queue tables");
            
            // Apply persisted occupancy data
            if (persistedOccupancy.Count > 0)
            {
                _queueTableOccupancy = new Dictionary<string, QueueEntryDto>(persistedOccupancy);
                await JS.InvokeVoidAsync("console.log", $"Applied {_queueTableOccupancy.Count} occupancy records from persisted data");
                
                // Make sure all tables with occupancy data have correct status
                foreach (var kvp in _queueTableOccupancy)
                {
                    var tableId = kvp.Key;
                    var queueEntry = kvp.Value;
                    
                    var table = _queueTables.FirstOrDefault(t => t.TableId == tableId);
                    if (table != null && table.Status?.ToLower() != "occupied")
                    {
                        table.Status = "occupied";
                        await JS.InvokeVoidAsync("console.log", $"Fixed status for table {table.TableNumber} to occupied based on persisted data");
                    }
                }
            }
            
            // Log occupancy data before updating
            if (_queueTableOccupancy.Count > 0)
            {
                await JS.InvokeVoidAsync("console.log", $"Current queue table occupancy count: {_queueTableOccupancy.Count}");
                foreach (var kvp in _queueTableOccupancy)
                {
                    await JS.InvokeVoidAsync("console.log", $"Occupancy data for table {kvp.Key}: {kvp.Value.CustomerName}");
                    
                    // Make sure each table with occupancy data is marked as occupied
                    var occupiedTable = _queueTables.FirstOrDefault(t => t.TableId == kvp.Key);
                    if (occupiedTable != null && occupiedTable.Status?.ToLower() != "occupied")
                    {
                        occupiedTable.Status = "occupied";
                        await JS.InvokeVoidAsync("console.log", $"Fixed status for table {occupiedTable.TableNumber} to occupied");
                    }
                }
            }
            
            // Check that each occupied table actually has occupancy data
            foreach (var table in _queueTables)
            {
                if (table.Status?.ToLower() == "occupied" && !_queueTableOccupancy.ContainsKey(table.TableId))
                {
                    // This table is marked as occupied but doesn't have occupancy data
                    await JS.InvokeVoidAsync("console.log", $"Table {table.TableNumber} is marked as occupied but has no occupancy data");
                    
                    // Look for queue entries with this table assigned
                    var assignedQueueEntry = _waitingQueue.FirstOrDefault(q => 
                        q.AssignedTableId == table.TableId && 
                        (q.Status?.ToLower() == "called" || q.Status?.ToLower() == "seated"));
                    
                    if (assignedQueueEntry != null)
                    {
                        await JS.InvokeVoidAsync("console.log", $"Found assigned queue entry for table {table.TableNumber}: {assignedQueueEntry.CustomerName}");
                        // Add to occupancy tracking
                        _queueTableOccupancy[table.TableId] = assignedQueueEntry;
                    }
                }
            }
            
            // Check queue entries for assigned tables that might be missing
            foreach (var queueEntry in _waitingQueue)
            {
                if (!string.IsNullOrEmpty(queueEntry.AssignedTableId) && 
                    (queueEntry.Status?.ToLower() == "called" || queueEntry.Status?.ToLower() == "seated"))
                {
                    // Find the table by ID
                    var tableInfo = _queueTables.FirstOrDefault(t => t.TableId == queueEntry.AssignedTableId);
                    if (tableInfo != null)
                    {
                        tableInfo.Status = "occupied";
                        // Add to occupancy tracking if not already there
                        if (!_queueTableOccupancy.ContainsKey(tableInfo.TableId))
                        {
                            _queueTableOccupancy[tableInfo.TableId] = queueEntry;
                            await JS.InvokeVoidAsync("console.log", $"Added missing occupancy data for table {tableInfo.TableNumber}: {queueEntry.CustomerName}");
                        }
                    }
                }
            }
            
            // Save updated occupancy data to persistence service
            TableOccupancyService.SetQueueTableOccupancy(effectiveOutletId, new Dictionary<string, QueueEntryDto>(_queueTableOccupancy));
            
            // Save updated table statuses to persistence service
            var tableStatuses = _queueTables
                .ToDictionary(t => t.TableId, t => t.Status ?? "available");
            TableOccupancyService.SetTableStatuses(effectiveOutletId, tableStatuses);
            
            await JS.InvokeVoidAsync("console.log", $"Saved {_queueTableOccupancy.Count} occupancy records to TableOccupancyService");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading queue tables: {ex.Message}");
            Snackbar.Add($"Error loading queue tables: {ex.Message}", Severity.Error);
        }
    }

    private async Task MatchReservationsWithTables()
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", "Matching reservations with tables...");
            
            int matchCount = 0;
            
            // Update table status based on reservations
            foreach (var table in _reservationTables)
            {
                // Look for a seated reservation using this table
                var seatedReservation = _todayReservations.FirstOrDefault(r => 
                    r.Status == "Seated" && 
                    r.TableNumbers != null &&
                    r.TableNumbers.Any(t => t == table.TableNumber));
                    
                if (seatedReservation != null)
                {
                    table.Status = "occupied";
                    matchCount++;
                    await JS.InvokeVoidAsync("console.log", $"Matched table {table.TableNumber} with seated reservation for {seatedReservation.CustomerName}");
                }
                else
                {
                    table.Status = "available";
                }
            }
            
            await JS.InvokeVoidAsync("console.log", $"Matched {matchCount} tables with active reservations");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error matching reservations with tables: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        IsLoading = true;
        
        try
        {
            // Store existing table status and occupancy data to prevent losing it during refresh
            var existingOccupancy = new Dictionary<string, QueueEntryDto>(_queueTableOccupancy);
            var existingTableStatus = _queueTables.Where(t => t.Status?.ToLower() == "occupied")
                .ToDictionary(t => t.TableId, t => t.Status);
            
            await JS.InvokeVoidAsync("console.log", $"Storing {existingOccupancy.Count} occupancy records and {existingTableStatus.Count} table statuses before refresh");
            
            if (!string.IsNullOrEmpty(_outletId))
            {
                // Refresh queue data first to ensure we have the latest queue entries
                await LoadQueueData();
                
                // Then refresh reservation data
                var today = DateTime.Today;
                await JS.InvokeVoidAsync("console.log", $"API CALL: GetReservationsByOutletAndDateAsync with outletId: {_outletId}, date: {today:yyyy-MM-dd}");
                _todayReservations = await ReservationService.GetReservationsByOutletAndDateAsync(_outletId, today);
                
                // Then refresh table data
                await LoadTables();
                
                // Finally refresh queue tables, but don't reset occupancy data
                await LoadQueueTables();
                
                // Restore any missing occupancy data and table status
                foreach (var tableId in existingTableStatus.Keys)
                {
                    var table = _queueTables.FirstOrDefault(t => t.TableId == tableId);
                    if (table != null)
                    {
                        // Ensure the table is still marked as occupied
                        if (table.Status?.ToLower() != "occupied")
                        {
                            table.Status = "occupied";
                            await JS.InvokeVoidAsync("console.log", $"Restored occupied status for table {table.TableNumber}");
                        }
                        
                        // Ensure occupancy data is preserved
                        if (!_queueTableOccupancy.ContainsKey(tableId) && existingOccupancy.ContainsKey(tableId))
                        {
                            _queueTableOccupancy[tableId] = existingOccupancy[tableId];
                            await JS.InvokeVoidAsync("console.log", $"Restored occupancy data for table {table.TableNumber}: {existingOccupancy[tableId].CustomerName}");
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error refreshing data: {ex.Message}");
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsLoading = false;
        StateHasChanged();
        }
    }

    private string GetTimeElapsed(DateTime? checkInTime)
    {
        if (checkInTime == null) return "Unknown";
        
        // Subtract 8 hours from current time for time zone adjustment
        var adjustedCurrentTime = DateTime.Now.AddHours(-8);
        var elapsed = adjustedCurrentTime - checkInTime.Value;
        
        // Handle negative elapsed time
        if (elapsed.TotalSeconds < 0)
        {
            return "0h 0m";
        }
        
        return $"{elapsed.Hours}h {elapsed.Minutes}m";
    }
    
    private int GetOccupancyRate()
    {
        if (_totalTables <= 0) return 0;
        
        var occupiedTables = _todayReservations.Count(r => r.Status == "Seated");
        return (occupiedTables * 100) / _totalTables;
    }

    private async Task HandleNoShow(string reservationId)
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", $"API CALL: MarkAsNoShowAsync with reservationId: {reservationId}");
            
            bool success = await ReservationService.MarkAsNoShowAsync(reservationId);
            
            if (success)
            {
                Snackbar.Add("Reservation marked as no-show", Severity.Success);
                await RefreshData();
            }
            else
            {
                Snackbar.Add("Failed to mark reservation as no-show", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error marking no-show: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCompletedReservation(string reservationId)
    {
        try
        {
            await JS.InvokeVoidAsync("console.log", $"API CALL: MarkAsCompletedAsync with reservationId: {reservationId}");
            
            bool success = await ReservationService.MarkAsCompletedAsync(reservationId);
            
            if (success)
            {
                Snackbar.Add("Reservation completed", Severity.Success);
                await RefreshData();
            }
            else
            {
                Snackbar.Add("Failed to complete reservation", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error completing reservation: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    private string GetAverageWaitTime()
    {
        if (_waitingQueue.Count == 0) return "0m";

        int totalMinutes = 0;
        foreach (var entry in _waitingQueue)
        {
            totalMinutes += entry.EstimatedWaitMinutes;
        }

        return $"{totalMinutes / _waitingQueue.Count}m";
    }

    private async Task RemoveFromQueue(int queueIndex)
    {
        if (queueIndex < 0 || queueIndex >= _waitingQueue.Count) 
        {
            Snackbar.Add("Invalid queue entry", Severity.Error);
            return;
        }
        
        var queueEntry = _waitingQueue[queueIndex];
        
        try
        {
            // Show loading message
            Snackbar.Add("Processing cancellation...", Severity.Info);
            
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            if (string.IsNullOrEmpty(effectiveOutletId))
            {
                Snackbar.Add("Error: Outlet ID not found", Severity.Error);
                return;
            }
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: CancelQueueEntryAsync with outletId: {effectiveOutletId}, queueId: {queueEntry.QueueId}, reason: No-show");
            
            // Call API to cancel queue entry with the "No-show" reason
            bool success = await QueueService.CancelQueueEntryAsync(effectiveOutletId, queueEntry.QueueId, "No-show");
            
            if (success)
            {
                // If API call successful, remove from local list and notify
                _waitingQueue.RemoveAt(queueIndex);
                Snackbar.Add($"{queueEntry.CustomerName} has been removed from the queue.", Severity.Success);
                
                // Force refresh of the component
                await InvokeAsync(StateHasChanged);
                
                // Refresh the queue data to ensure consistency
                await LoadQueueData();
            }
            else
            {
                Snackbar.Add("Failed to remove customer from queue. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error removing from queue: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    // Add new method to load queue data
    private async Task LoadQueueData()
    {
        try
        {
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            if (string.IsNullOrEmpty(effectiveOutletId))
            {
                await JS.InvokeVoidAsync("console.log", "Both Outlet UUID and outletId are null or empty, cannot load queue data.");
                return;
            }
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: GetWaitingQueueByOutletIdAsync with outletId: {effectiveOutletId}");
            
            // Call the API to get waiting queue using effectiveOutletId
            var queueEntries = await QueueService.GetWaitingQueueByOutletIdAsync(effectiveOutletId);
            
            await JS.InvokeVoidAsync("console.log", $"API RESPONSE: Received {queueEntries.Count} queue entries");
            
            // Update waiting queue list
            _waitingQueue = queueEntries;
            
            // Log the first queue entry if there are any
            if (_waitingQueue.Count > 0)
            {
                await JS.InvokeVoidAsync("console.log", $"First queue entry: ID={_waitingQueue[0].QueueId}, Customer={_waitingQueue[0].CustomerName}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error loading queue data: {ex.Message}");
            if (ex.InnerException != null)
            {
                await JS.InvokeVoidAsync("console.log", $"Inner exception: {ex.InnerException.Message}");
            }
            Snackbar.Add($"Error loading queue data: {ex.Message}", Severity.Error);
        }
    }

    // Add new method to calculate waiting time from QueuedAt
    private string GetQueueWaitingTime(DateTime queuedAt)
    {
        // Subtract 8 hours from current time for time zone adjustment
        var adjustedCurrentTime = DateTime.Now.AddHours(-8);
        var elapsed = adjustedCurrentTime - queuedAt;
        
        // Handle negative elapsed time
        if (elapsed.TotalSeconds < 0)
        {
            return "0h 0m";
        }
        
        return $"{elapsed.Hours}h {elapsed.Minutes}m";
    }

    // New methods for queue table management
    private async Task HandleCallNext(string tableId)
    {
        try
        {
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            if (string.IsNullOrEmpty(effectiveOutletId))
            {
                await JS.InvokeVoidAsync("console.log", "Both Outlet UUID and outletId are null or empty, cannot call next in queue.");
                Snackbar.Add("Outlet ID not available. Cannot proceed.", Severity.Error);
                return;
            }
            
            // Check if there are any customers in the queue first
            if (_waitingQueue.Count == 0)
            {
                Snackbar.Add("No customers in waiting queue", Severity.Info);
                return;
            }
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: CallNextInQueueAsync with outletId: {effectiveOutletId}, tableId: {tableId}");
            
            var nextQueueEntry = await QueueService.CallNextInQueueAsync(effectiveOutletId, tableId);
            
            if (nextQueueEntry != null)
            {
                await JS.InvokeVoidAsync("console.log", $"Next in queue: {nextQueueEntry.CustomerName}, Status: {nextQueueEntry.Status}");
                
                Snackbar.Add($"Called {nextQueueEntry.CustomerName} (Queue #{nextQueueEntry.QueueCode})", Severity.Success);
                
                // Get the first customer in queue as fallback (in case API doesn't return all data)
                var firstInQueue = _waitingQueue.FirstOrDefault();
                
                // Combine API response data with existing queue data if needed
                if (string.IsNullOrEmpty(nextQueueEntry.CustomerPhone) && firstInQueue != null)
                {
                    nextQueueEntry.CustomerPhone = firstInQueue.CustomerPhone;
                    nextQueueEntry.PartySize = firstInQueue.PartySize;
                    nextQueueEntry.QueuedAt = firstInQueue.QueuedAt;
                }
                
                // Update queue entry status
                nextQueueEntry.Status = "Called";
                nextQueueEntry.AssignedTableId = tableId;
                
                // Get the table from _queueTables and update its status
                var tableInfo = _queueTables.FirstOrDefault(t => t.TableId == tableId);
                if (tableInfo != null)
                {
                    tableInfo.Status = "occupied";
                    
                    // Add to occupancy tracking immediately
                    _queueTableOccupancy[tableInfo.TableId] = nextQueueEntry;
                    
                    // Update the persistence service
                    TableOccupancyService.MarkTableAsOccupied(effectiveOutletId, tableId, nextQueueEntry);
                    
                    await JS.InvokeVoidAsync("console.log", $"Updated table status and added queue entry to occupancy tracking");
                    await JS.InvokeVoidAsync("console.log", $"Queue entry in occupancy: {_queueTableOccupancy[tableInfo.TableId].CustomerName}");
                }
                
                // Force UI update immediately
                StateHasChanged();
                
                // Update waiting queue to remove or mark the called customer
                int indexOfCalled = _waitingQueue.FindIndex(q => q.QueueId == nextQueueEntry.QueueId);
                if (indexOfCalled >= 0)
                {
                    // Update the status in the waiting queue list
                    _waitingQueue[indexOfCalled].Status = "Called";
                    _waitingQueue[indexOfCalled].AssignedTableId = tableId;
                }
                
                // Load only queue data to update status
                await LoadQueueData();
                
                // No need to call full RefreshData which can overwrite our changes
            }
            else
            {
                // Manually handle the case when API doesn't return data but there are customers in queue
                if (_waitingQueue.Count > 0)
                {
                    var firstCustomer = _waitingQueue[0];
                    await JS.InvokeVoidAsync("console.log", $"API returned null, using first customer from queue: {firstCustomer.CustomerName}");
                    
                    // Assign first customer in queue to the table
                    firstCustomer.Status = "Called";
                    firstCustomer.AssignedTableId = tableId;
                    
                    var tableInfo = _queueTables.FirstOrDefault(t => t.TableId == tableId);
                    if (tableInfo != null)
                    {
                        tableInfo.Status = "occupied";
                        _queueTableOccupancy[tableInfo.TableId] = firstCustomer;
                        
                        // Update the persistence service
                        TableOccupancyService.MarkTableAsOccupied(effectiveOutletId, tableId, firstCustomer);
                        
                        Snackbar.Add($"Called {firstCustomer.CustomerName} (Queue #{firstCustomer.QueueCode})", Severity.Success);
                        
                        // Force UI update
                        StateHasChanged();
                    }
                    
                    // Update waiting queue to mark the called customer
                    _waitingQueue[0].Status = "Called";
                    _waitingQueue[0].AssignedTableId = tableId;
                    
                    // Load only queue data
                    await LoadQueueData();
                }
                else
                {
                    Snackbar.Add("No customers in queue", Severity.Info);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error calling next in queue: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleAssignTable(string tableId)
    {
        try
        {
            // Show dialog to select from waiting queue
            if (_waitingQueue.Count == 0)
            {
                Snackbar.Add("No customers in waiting queue", Severity.Info);
                return;
            }
            
            _selectedTable = _queueTables.FirstOrDefault(t => t.TableId == tableId);
            if (_selectedTable == null)
            {
                Snackbar.Add("Selected table not found", Severity.Error);
                return;
            }
            
            // Show a dialog with dropdown to select a customer from queue
            var parameters = new DialogParameters
            {
                ["TableNumber"] = _selectedTable.TableNumber,
                ["WaitingQueue"] = _waitingQueue
            };
            
            var dialog = await DialogService.ShowAsync<QueueSelectionDialog>("Assign Table", parameters);
            var result = await dialog.Result;
            
            if (!result.Canceled && result.Data is string queueId && !string.IsNullOrEmpty(queueId))
            {
                await AssignTableToQueue(tableId, queueId);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error in HandleAssignTable: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleTableRecommendation(string tableId)
    {
        try
        {
            // Check if there are any customers in the queue
            if (_waitingQueue.Count == 0)
            {
                Snackbar.Add("No customers in waiting queue", Severity.Info);
                return;
            }
            
            _selectedTable = _queueTables.FirstOrDefault(t => t.TableId == tableId);
            if (_selectedTable == null)
            {
                Snackbar.Add("Selected table not found", Severity.Error);
                return;
            }
            
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            Snackbar.Add("Analyzing best match for this table...", Severity.Info);
            
            // Find the most suitable customer based on party size match to table capacity
            // Sort by the absolute difference between party size and table capacity
            var optimalCustomer = _waitingQueue
                .OrderBy(q => Math.Abs(q.PartySize - _selectedTable.Capacity))
                .FirstOrDefault();
                
            if (optimalCustomer == null)
            {
                Snackbar.Add("No suitable customers found in the queue", Severity.Warning);
                return;
            }
            
            // Create a recommendation object
            var recommendation = new
            {
                queueEntryId = optimalCustomer.QueueId,
                queueCode = optimalCustomer.QueueCode,
                customerName = optimalCustomer.CustomerName,
                partySize = optimalCustomer.PartySize,
                tableId = _selectedTable.TableId,
                tableNumber = _selectedTable.TableNumber,
                tableCapacity = _selectedTable.Capacity,
                recommendationType = GetRecommendationType(optimalCustomer.PartySize, _selectedTable.Capacity),
                recommendationMessage = GetRecommendationMessage(optimalCustomer.CustomerName, optimalCustomer.PartySize, _selectedTable.TableNumber, _selectedTable.Capacity)
            };
            
            // Log the recommendation
            await JS.InvokeVoidAsync("console.log", "Best match recommendation:", recommendation);
            
            // Show a confirmation dialog with the recommendation
            var parameters = new DialogParameters
            {
                ["ContentText"] = recommendation.recommendationMessage,
                ["ButtonText"] = "Assign Table",
                ["Color"] = Color.Primary
            };
            
            var dialog = await DialogService.ShowAsync<ConfirmDialog>("Table Recommendation", parameters);
            var result = await dialog.Result;
            
            if (!result.Canceled)
            {
                // User accepted the recommendation
                await JS.InvokeVoidAsync("console.log", $"User accepted recommendation, assigning table {_selectedTable.TableId} to customer {optimalCustomer.CustomerName}");
                
                // Assign the selected table to the customer
                await AssignTableToQueue(_selectedTable.TableId, optimalCustomer.QueueId);
            }
            else
            {
                await JS.InvokeVoidAsync("console.log", "User rejected recommendation");
                Snackbar.Add("Table assignment canceled", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error in HandleTableRecommendation: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    private string GetRecommendationType(int partySize, int tableCapacity)
    {
        int diff = Math.Abs(partySize - tableCapacity);
        
        if (diff == 0)
            return "Optimal";
        else if (partySize <= tableCapacity && diff <= 2)
            return "Good";
        else if (partySize > tableCapacity && diff <= 1)
            return "Tight";
        else
            return "Suboptimal";
    }
    
    private string GetRecommendationMessage(string customerName, int partySize, string tableNumber, int tableCapacity)
    {
        int diff = Math.Abs(partySize - tableCapacity);
        
        if (diff == 0)
            return $"Perfect match: {customerName} (party of {partySize}) perfectly fits table {tableNumber} capacity ({tableCapacity})";
        else if (partySize < tableCapacity)
            return $"Good match: {customerName} (party of {partySize}) can be seated at table {tableNumber} (capacity {tableCapacity})";
        else if (partySize > tableCapacity && diff <= 1)
            return $"Tight fit: {customerName} (party of {partySize}) might be a tight fit for table {tableNumber} (capacity {tableCapacity})";
        else
            return $"Suboptimal match: {customerName} (party of {partySize}) doesn't match well with table {tableNumber} (capacity {tableCapacity})";
    }
    
    private async Task AssignTableToQueue(string tableId, string queueId)
    {
        try
        {
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: AssignTableToQueueAsync with outletId: {effectiveOutletId}, queueId: {queueId}, tableId: {tableId}");
            
            bool success = await QueueService.AssignTableToQueueAsync(effectiveOutletId, queueId, tableId);
            
            if (success)
            {
                await JS.InvokeVoidAsync("console.log", "Table assigned successfully");
                
                // Get the queue entry and customer name
                var queueEntry = _waitingQueue.FirstOrDefault(q => q.QueueId == queueId);
                string customerName = queueEntry?.CustomerName ?? "Customer";
                
                Snackbar.Add($"Table assigned to {customerName}", Severity.Success);
                
                // Update the UI directly instead of showing a dialog
                if (queueEntry != null)
                {
                    queueEntry.Status = "Called";
                    queueEntry.AssignedTableId = tableId;
                    
                    // Get the table to update its status
                    var tableInfo = _queueTables.FirstOrDefault(t => t.TableId == tableId);
                    if (tableInfo != null)
                    {
                        tableInfo.Status = "occupied";
                        // Add to occupancy tracking
                        _queueTableOccupancy[tableInfo.TableId] = queueEntry;
                        
                        // Update the persistence service
                        TableOccupancyService.MarkTableAsOccupied(effectiveOutletId, tableId, queueEntry);
                        
                        // Log the assignment for debugging
                        await JS.InvokeVoidAsync("console.log", $"Assigned table {tableInfo.TableNumber} to {customerName}");
                        await JS.InvokeVoidAsync("console.log", $"Table status: {tableInfo.Status}");
                        await JS.InvokeVoidAsync("console.log", $"Occupancy tracking count: {_queueTableOccupancy.Count}");
                    }
                    
                    // Find the queue entry in the waiting queue and update its status
                    int queueIndex = _waitingQueue.FindIndex(q => q.QueueId == queueId);
                    if (queueIndex >= 0)
                    {
                        _waitingQueue[queueIndex].Status = "Called";
                        _waitingQueue[queueIndex].AssignedTableId = tableId;
                    }
                    
                    // Force UI update immediately
                    StateHasChanged();
                    
                    // Load only queue data to update status
                    await LoadQueueData();
                }
                else
                {
                    await RefreshData();
                }
            }
            else
            {
                Snackbar.Add("Failed to assign table", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error assigning table: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task MarkQueueAsSeated(string queueId)
    {
        try
        {
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: MarkQueueAsSeatedAsync with outletId: {effectiveOutletId}, queueId: {queueId}");
            
            bool success = await QueueService.MarkQueueAsSeatedAsync(effectiveOutletId, queueId);
            
            if (success)
            {
                Snackbar.Add("Customer marked as seated", Severity.Success);
                
                // Find the queue entry in the dictionary and update its status
                foreach (var tableId in _queueTableOccupancy.Keys.ToList())
                {
                    if (_queueTableOccupancy[tableId].QueueId == queueId)
                    {
                        // Update status in the occupancy dictionary
                        _queueTableOccupancy[tableId].Status = "Seated";
                        
                        // Update the persistence service with the updated status
                        TableOccupancyService.MarkTableAsOccupied(effectiveOutletId, tableId, _queueTableOccupancy[tableId]);
                        
                        await JS.InvokeVoidAsync("console.log", $"Updated status to Seated for customer {_queueTableOccupancy[tableId].CustomerName}");
                        break;
                    }
                }
                
                // Find the queue entry in the waiting queue and update its status
                int queueIndex = _waitingQueue.FindIndex(q => q.QueueId == queueId);
                if (queueIndex >= 0)
                {
                    _waitingQueue[queueIndex].Status = "Seated";
                    await JS.InvokeVoidAsync("console.log", $"Updated status in waiting queue for {_waitingQueue[queueIndex].CustomerName}");
                }
                
                // Update UI immediately
                StateHasChanged();
                
                // Load only queue data to update status
                await LoadQueueData();
            }
            else
            {
                Snackbar.Add("Failed to mark customer as seated", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error marking as seated: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleCancel(string queueId)
    {
        try
        {
            // Show loading message
            Snackbar.Add("Processing cancellation...", Severity.Info);
            
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            if (string.IsNullOrEmpty(effectiveOutletId))
            {
                Snackbar.Add("Error: Outlet ID not found", Severity.Error);
                return;
            }
            
            if (string.IsNullOrEmpty(queueId))
            {
                Snackbar.Add("Error: Queue ID not found", Severity.Error);
                return;
            }
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: CancelQueueEntryAsync with outletId: {effectiveOutletId}, queueId: {queueId}, reason: No-show");
            
            // Call API to cancel queue entry with the "No-show" reason
            bool success = await QueueService.CancelQueueEntryAsync(effectiveOutletId, queueId, "No-show");
            
            if (success)
            {
                // Find the table this customer was assigned to
                string assignedTableId = null;
                foreach (var kvp in _queueTableOccupancy)
                {
                    if (kvp.Value.QueueId == queueId)
                    {
                        assignedTableId = kvp.Key;
                        break;
                    }
                }
                
                // Remove from occupancy tracking
                if (assignedTableId != null)
                {
                    _queueTableOccupancy.Remove(assignedTableId);
                    
                    // Update the persistence service
                    TableOccupancyService.MarkTableAsAvailable(effectiveOutletId, assignedTableId);
                    
                    // Update table status to available
                    var tableInfo = _queueTables.FirstOrDefault(t => t.TableId == assignedTableId);
                    if (tableInfo != null)
                    {
                        tableInfo.Status = "available";
                        await JS.InvokeVoidAsync("console.log", $"Marked table {tableInfo.TableNumber} as available");
                    }
                }
                
                // Remove from waiting queue if still present
                int queueIndex = _waitingQueue.FindIndex(q => q.QueueId == queueId);
                if (queueIndex >= 0)
                {
                    _waitingQueue.RemoveAt(queueIndex);
                    await JS.InvokeVoidAsync("console.log", $"Removed cancelled customer from waiting queue");
                }
                
                Snackbar.Add("Customer has been removed from the queue and table", Severity.Success);
                
                // Update UI immediately
                StateHasChanged();
                
                // Load only queue data to update status
                await LoadQueueData();
            }
            else
            {
                Snackbar.Add("Failed to remove customer from queue", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error removing from queue: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
    
    private async Task HandleCompleteQueue(string queueId)
    {
        try
        {
            // Use outletId as fallback if outletUUID is empty
            var effectiveOutletId = !string.IsNullOrEmpty(_outletUUID) ? _outletUUID : _outletId;
            
            await JS.InvokeVoidAsync("console.log", $"API CALL: MarkQueueAsCompletedAsync with outletId: {effectiveOutletId}, queueId: {queueId}");
            
            bool success = await QueueService.MarkQueueAsCompletedAsync(effectiveOutletId, queueId);
            
            if (success)
            {
                Snackbar.Add("Customer visit completed", Severity.Success);
                
                // Find the table this customer was assigned to
                string assignedTableId = null;
                foreach (var kvp in _queueTableOccupancy)
                {
                    if (kvp.Value.QueueId == queueId)
                    {
                        assignedTableId = kvp.Key;
                        break;
                    }
                }
                
                // Remove from occupancy tracking
                if (assignedTableId != null)
                {
                    _queueTableOccupancy.Remove(assignedTableId);
                    
                    // Update the persistence service
                    TableOccupancyService.MarkTableAsAvailable(effectiveOutletId, assignedTableId);
                    
                    // Update table status to available
                    var tableInfo = _queueTables.FirstOrDefault(t => t.TableId == assignedTableId);
                    if (tableInfo != null)
                    {
                        tableInfo.Status = "available";
                        await JS.InvokeVoidAsync("console.log", $"Marked table {tableInfo.TableNumber} as available");
                    }
                }
                
                // Remove from waiting queue if still present
                int queueIndex = _waitingQueue.FindIndex(q => q.QueueId == queueId);
                if (queueIndex >= 0)
                {
                    _waitingQueue.RemoveAt(queueIndex);
                    await JS.InvokeVoidAsync("console.log", $"Removed completed customer from waiting queue");
                }
                
                // Update UI immediately
                StateHasChanged();
                
                // Load only queue data to update status
                await LoadQueueData();
            }
            else
            {
                Snackbar.Add("Failed to complete customer visit", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"Error completing queue: {ex.Message}");
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    // Helper method to convert ServiceTableTypeInfo to ModelTableTypeInfo
    private List<FNBReservation.Portal.Models.TableTypeInfo> ConvertServiceToModelTableTypeInfo(List<FNBReservation.Portal.Services.TableTypeInfo> serviceTables)
    {
        if (serviceTables == null)
            return new List<FNBReservation.Portal.Models.TableTypeInfo>();
        
        return serviceTables.Select(t => new FNBReservation.Portal.Models.TableTypeInfo
        {
            TableId = t.Id,
            TableNumber = t.TableNumber,
            Capacity = t.Capacity,
            Status = t.Status,
            Section = t.Section,
            TableType = t.IsActive ? "Active" : "Inactive"
        }).ToList();
    }
}