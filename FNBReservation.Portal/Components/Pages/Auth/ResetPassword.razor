@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using FNBReservation.Portal.Services
@using Microsoft.AspNetCore.WebUtilities
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JS
@layout LoginLayout
@rendermode InteractiveServer

<PageTitle>Reset Password - F&B Reservation System</PageTitle>
<link href="css/login.css" rel="stylesheet" />

<div class="login-container">
    <MudPaper Class="login-card mx-auto" Elevation="3" Style="max-width: 500px;">
        <MudItem xs="12" Class="pa-8">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.h5" Class="mb-1 primary-text">Create New Password</MudText>
                <MudDivider Class="primary-divider mb-4" Style="width: 60px; height: 2px;" />
                <MudText Typo="Typo.body2" Color="Color.Dark" Class="mb-6">
                    Enter your new password below. Make sure it's at least 8 characters including a number, an uppercase letter, a lowercase letter, and a special character.
                </MudText>

                @if (resetSuccess)
                {
                    <MudAlert Severity="Severity.Success" Class="mb-4">
                        Your password has been reset successfully.
                    </MudAlert>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               OnClick="@(() => NavigationManager.NavigateTo("/"))">
                        Go to Login
                    </MudButton>
                }
                else if (!string.IsNullOrEmpty(token))
                {
                    <EditForm Model="@resetModel" OnValidSubmit="@HandleResetPasswordAsync" FormName="resetPasswordForm">
                        <DataAnnotationsValidator />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
                        }

                        <div class="mb-4">
                            <MudTextField Label="New Password" @bind-Value="resetModel.NewPassword"
                                          Variant="Variant.Outlined"
                                          InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@(showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                          OnAdornmentClick="() => showPassword = !showPassword"
                                          AdornmentColor="Color.Primary"
                                          Disabled="@isLoading" />
                        </div>

                        <div class="mb-6">
                            <MudTextField Label="Confirm Password" @bind-Value="resetModel.ConfirmPassword"
                                          Variant="Variant.Outlined"
                                          InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                          OnAdornmentClick="() => showConfirmPassword = !showConfirmPassword"
                                          AdornmentColor="Color.Primary"
                                          Disabled="@isLoading" />
                        </div>

                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   FullWidth="true"
                                   ButtonType="ButtonType.Submit"
                                   Disabled="@isLoading">
                            @if (isLoading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <span class="ms-2">Resetting Password</span>
                            }
                            else
                            {
                                <span>Reset Password</span>
                            }
                        </MudButton>
                    </EditForm>
                }
                else
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4">Invalid or missing reset token. Please request a new password reset link.</MudAlert>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               OnClick="@(() => NavigationManager.NavigateTo("/forgot-password"))">
                        Go to Forgot Password
                    </MudButton>
                }
            </div>
        </MudItem>
    </MudPaper>
</div>

@code {
    private ResetPasswordModel resetModel = new ResetPasswordModel();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string token = string.Empty;
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool resetSuccess = false;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var tokenValue))
        {
            token = tokenValue.ToString();
            JS.InvokeVoidAsync("console.log", "Token found in URL: " + token);
        }
        else
        {
            token = string.Empty;
            JS.InvokeVoidAsync("console.log", "No token found in URL");
        }
    }

    private class ResetPasswordModel
    {
        [Required(ErrorMessage = "New password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$",
            ErrorMessage = "Password must include at least one uppercase letter, one lowercase letter, one number, and one special character")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }

    private async Task HandleResetPasswordAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();
            
            await JS.InvokeVoidAsync("console.log", "Resetting password with token: " + token);
            
            var result = await AuthService.ResetPassword(token, resetModel.NewPassword);
            
            if (result.Success)
            {
                resetSuccess = true;
                Snackbar.Add("Your password has been reset successfully", Severity.Success);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Failed to reset password";
                await JS.InvokeVoidAsync("console.log", "Reset password failed: " + errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again.";
            await JS.InvokeVoidAsync("console.log", "Reset password exception: " + ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}