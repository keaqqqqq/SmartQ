@page "/forgot-password"
@using System.ComponentModel.DataAnnotations
@using FNBReservation.Portal.Services
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JS
@layout LoginLayout
@rendermode InteractiveServer

<PageTitle>Forgot Password - F&B Reservation System</PageTitle>
<link href="css/login.css" rel="stylesheet" />

<div class="login-container">
    <MudPaper Class="login-card mx-auto" Elevation="3" Style="max-width: 500px;">
        <MudItem xs="12" Class="pa-8">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.h5" Class="mb-1 primary-text">Reset Password</MudText>
                <MudDivider Class="primary-divider mb-4" Style="width: 60px; height: 2px;" />
                <MudText Typo="Typo.body2" Color="Color.Dark" Class="mb-6">
                    Enter your email address and we'll send you instructions to reset your password.
                </MudText>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
                }

                @if (requestSent)
                {
                    <MudAlert Severity="Severity.Success" Class="mb-4">
                        Password reset instructions have been sent to your email.
                    </MudAlert>
                    <MudButton Variant="Variant.Filled"
                              Color="Color.Primary"
                              FullWidth="true"
                              OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                        Return to Login
                    </MudButton>
                }
                else
                {
                    <EditForm Model="@resetModel" OnValidSubmit="@HandlePasswordResetAsync" FormName="resetForm">
                        <DataAnnotationsValidator />
                        <div class="mb-4">
                            <MudTextField Label="Email Address" @bind-Value="resetModel.Email"
                                         Variant="Variant.Outlined"
                                         Adornment="Adornment.Start"
                                         AdornmentIcon="@Icons.Material.Filled.Email"
                                         AdornmentColor="Color.Primary"
                                         Disabled="@isLoading" />
                        </div>

                        <div class="d-flex gap-3 mt-6">
                            <MudButton Variant="Variant.Outlined"
                                      Color="Color.Dark"
                                      FullWidth="true"
                                      OnClick="@(() => NavigationManager.NavigateTo("/login"))"
                                      Disabled="@isLoading">
                                Back to Login
                            </MudButton>
                            <MudButton Variant="Variant.Filled"
                                      Color="Color.Primary"
                                      FullWidth="true"
                                      ButtonType="ButtonType.Submit"
                                      Disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <span class="ms-2">Submitting...</span>
                                }
                                else
                                {
                                    <span>Submit</span>
                                }
                            </MudButton>
                        </div>
                    </EditForm>
                }
            </div>
        </MudItem>
    </MudPaper>
</div>

@code {
    private ResetPasswordModel resetModel = new ResetPasswordModel();
    private bool isLoading = false;
    private bool requestSent = false;
    private string errorMessage = string.Empty;

    private class ResetPasswordModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
    }

    private async Task HandlePasswordResetAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();
            
            await JS.InvokeVoidAsync("console.log", "Forgot password request for: " + resetModel.Email);
            
            var result = await AuthService.ForgotPassword(resetModel.Email);
            
            if (result)
            {
                requestSent = true;
                // Since we don't want to reveal if the email exists, we always show success
                Snackbar.Add("Password reset instructions sent to your email", Severity.Success);
            }
            else
            {
                errorMessage = "There was a problem processing your request. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred. Please try again.";
            await JS.InvokeVoidAsync("console.log", "Forgot password exception: " + ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}