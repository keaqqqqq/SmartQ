@page "/login"
@using System.ComponentModel.DataAnnotations
@using FNBReservation.Portal.Services
@using Microsoft.AspNetCore.WebUtilities
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthService AuthService
@inject IJSRuntime JS
@layout LoginLayout
@rendermode InteractiveServer
@inject ILogger<Login> Logger

<PageTitle>Login - F&B Reservation System</PageTitle>
<link href="css/login.css" rel="stylesheet" />

<div class="login-container">
    <MudPaper Class="login-card mx-auto" Elevation="3">
        <MudGrid>
            <MudItem xs="12" md="6" Class="login-image-container px-0">
                <div class="food-image"></div>
            </MudItem>
            <MudItem xs="12" md="6" Class="pa-8">
                <div class="d-flex flex-column h-100">
                    <div class="mb-6 mt-3">
                        <MudText Typo="Typo.h4" Class="mb-1 primary-text">Welcome Back!</MudText>
                        <MudText Typo="Typo.subtitle2" Color="Color.Dark">Sign in to continue to SmartQ</MudText>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" Class="mb-4" Variant="Variant.Filled">@errorMessage</MudAlert>
                    }
                    
                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLoginAsync" FormName="loginForm" Class="flex-grow-1 d-flex flex-column">
                        <DataAnnotationsValidator />
                        <div class="mb-4">
                            <MudTextField Label="Username or Staff ID" @bind-Value="loginModel.Username"
                            Variant="Variant.Outlined"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Person"
                            AdornmentColor="Color.Primary"
                            Disabled="@isLoading" />
                        </div>
                        <div class="mb-3">
                            <MudTextField Label="Password" @bind-Value="loginModel.Password"
                            Variant="Variant.Outlined"
                            InputType="InputType.Password"
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Lock"
                            AdornmentColor="Color.Primary"
                            Disabled="@isLoading" />
                        </div>
                        <div class="d-flex justify-space-between align-center mb-1 mt-5">
                            <div class="d-flex align-center">
                                <input type="checkbox" id="rememberMe" @bind="rememberMe" class="remember-checkbox" disabled="@isLoading" />
                                <label for="rememberMe" class="ml-2 remember-label">Remember me</label>
                            </div>
                            <MudLink Href="/forgot-password" Underline="Underline.Always" Color="Color.Primary">Forgot password?</MudLink>
                        </div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true"
                        ButtonType="ButtonType.Submit" Class="mt-auto login-button" Disabled="@isLoading">
                            @if (isLoading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <span class="ms-2">Signing In...</span>
                            }
                            else
                            {
                                <span>Sign In</span>
                                <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Class="ml-2" />
                            }
                        </MudButton>
                    </EditForm>
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>
</div>


@code {
    private LoginModel loginModel = new LoginModel();
    private bool rememberMe = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var param))
        {
            returnUrl = param.ToString();
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        public bool RememberMe { get; set; }
    }

    private async Task HandleLoginAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();
            
            Logger.LogInformation("Attempting login for user: {Username}", loginModel.Username);
            
            var result = await AuthService.Login(loginModel.Username, loginModel.Password, rememberMe);
            
            if (result.Success)
            {
                Snackbar.Add("Login successful!", Severity.Success);
                
                // Small delay to ensure authentication state is updated
                await Task.Delay(300);
                
                // Navigate to return URL if it exists, otherwise to home
                var targetUrl = string.IsNullOrEmpty(returnUrl) ? "/" : returnUrl;
                
                Logger.LogInformation("Login successful, redirecting to: {TargetUrl}", targetUrl);
                
                // Force reload the page to ensure auth state is recognized
                NavigationManager.NavigateTo(targetUrl, forceLoad: true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please check your credentials.";
                Logger.LogWarning("Login failed for user: {Username}", loginModel.Username);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            Logger.LogError(ex, "Exception during login attempt");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}