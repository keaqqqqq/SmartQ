@page "/reservations"
@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@using FNBReservation.Portal.Components.Dialogs
@inject IReservationService ReservationService
@inject IOutletService OutletService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime _jsRuntime
@rendermode InteractiveServer

<PageTitle>Reservations - F&B Reservation System</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4">Reservation Management</MudText>
    </div>

    <MudCard>
        <MudCardContent Class="py-4">
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudSelect T="string" Value="@selectedOutletId" ValueChanged="@OutletChanged" Label="Outlet"
                               Variant="Variant.Outlined"
                               AdornmentIcon="@Icons.Material.Filled.Store"
                               Adornment="Adornment.Start"
                               HelperText="Filter by outlet">
                        <MudSelectItem Value="@("all")">All Outlets</MudSelectItem>
                        @foreach (var outlet in outlets)
                        {
                            <MudSelectItem Value="@outlet.OutletId">@outlet.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudSelect T="string" Value="@selectedStatus" ValueChanged="@StatusChanged" Label="Status"
                               Variant="Variant.Outlined"
                               AdornmentIcon="@Icons.Material.Filled.FilterList"
                               Adornment="Adornment.Start"
                               HelperText="Filter by status">
                        <MudSelectItem Value="@("")">All Statuses</MudSelectItem>
                        <MudSelectItem Value="@("Confirmed")">Confirmed</MudSelectItem>
                        <MudSelectItem Value="@("Completed")">Completed</MudSelectItem>
                        <MudSelectItem Value="@("Canceled")">Canceled</MudSelectItem>
                        <MudSelectItem Value="@("No-Show")">No-Show</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudTextField @bind-Value="searchTerm" Label="Search"
                                  Variant="Variant.Outlined"
                                  Placeholder="Name, phone, email..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  HelperText="Search by customer details"
                                  Immediate="true"
                                  OnDebounceIntervalElapsed="SearchReservations" />
                </MudItem>
            </MudGrid>

            @if (isLoading)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            }
            else
            {
                <div class="mt-4">
                    <MudText Typo="Typo.body2" Class="mb-2">
                        @filteredReservations.Count Reservations found
                    </MudText>
                    <MudTable Items="@filteredReservations" Hover="true" Breakpoint="Breakpoint.Sm"
                              Loading="@isLoading" LoadingProgressColor="Color.Primary"
                              T="ReservationDto" Dense="@true"
                              SortLabel="Sort by" Filter="@QuickFilter"
                              Bordered="true">
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy="new Func<ReservationDto, object>(x => x.ReservationDate)">Date & Time</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ReservationDto, object>(x => x.CustomerName)">Customer</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ReservationDto, object>(x => x.PartySize)">Party</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ReservationDto, object>(x => x.OutletName)">Outlet</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortBy="new Func<ReservationDto, object>(x => x.Status)">Status</MudTableSortLabel></MudTh>
                            <MudTh>Tables</MudTh>
                            <MudTh>Special Requests</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date & Time">
                                <div class="font-weight-bold">@context.ReservationDate.ToString("dd MMM yyyy")</div>
                                <MudText Typo="Typo.caption">@context.ReservationDate.ToString("hh:mm tt")</MudText>
                            </MudTd>
                            <MudTd DataLabel="Customer">
                                <div class="font-weight-medium">@context.CustomerName</div>
                                <MudText Typo="Typo.caption">@context.CustomerPhone</MudText>
                            </MudTd>
                            <MudTd DataLabel="Party">@context.PartySize</MudTd>
                            <MudTd DataLabel="Outlet">@context.OutletName</MudTd>
                            <MudTd DataLabel="Status">
                                <MudChip Color="@GetStatusColor(context.Status)" Size="Size.Small"
                                         Style="font-size: 0.75rem;" T="string">
                                    @context.Status
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Tables">
                                @(string.Join(", ", context.TableNumbers))
                            </MudTd>
                            <MudTd DataLabel="Special Requests">
                                <div style="max-width: 180px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    @(string.IsNullOrEmpty(context.SpecialRequests) ? "-" : context.SpecialRequests)
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <div class="d-flex gap-1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Size="Size.Small"
                                                   OnClick="@(() => ViewReservationDetails(context))"
                                                   Color="Color.Info"
                                                   Title="View Details" />
                                    @if (context.Status == "Confirmed")
                                    {
                                        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small"
                                                       OnClick="@(() => MarkCompleted(context))"
                                                       Color="Color.Dark"
                                                       Title="Mark as Completed" />
                                        <MudIconButton Icon="@Icons.Material.Filled.PersonOff" Size="Size.Small"
                                                       OnClick="@(() => MarkNoShow(context))"
                                                       Color="Color.Warning"
                                                       Title="No-Show" />
                                    }
                                </div>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText Align="Align.Center" Class="my-5">No reservations found that match the search criteria.</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudTable>
                </div>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private List<OutletDto> outlets = new();
    private List<ReservationDto> reservations = new();
    private List<ReservationDto> filteredReservations = new();

    private string selectedOutletId = "all";
    private string selectedStatus = "";
    private string searchTerm = "";

    private bool isLoading = true;
    private bool isFirstRender = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOutlets();
        // We will load reservations in OnAfterRenderAsync to avoid JS interop during prerendering
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isFirstRender)
        {
            isFirstRender = false;
            await LoadReservations();
        }
    }

    private async Task LoadOutlets()
    {
        try
        {
            outlets = await OutletService.GetOutletsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading outlets: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadReservations()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var filter = new ReservationFilterDto
            {
                OutletId = selectedOutletId == "all" ? null : selectedOutletId,
                Status = string.IsNullOrEmpty(selectedStatus) ? null : selectedStatus,
                SearchTerm = string.IsNullOrEmpty(searchTerm) ? null : searchTerm
            };

            // Log filter values to console
            await LogToConsoleAsync("Loading reservations with filter:");
            await LogToConsoleAsync($"  OutletId: {selectedOutletId}");
            await LogToConsoleAsync($"  Status: {selectedStatus}");
            await LogToConsoleAsync($"  SearchTerm: {searchTerm}");

            reservations = await ReservationService.GetReservationsAsync(filter);
            await LogToConsoleAsync($"Retrieved {reservations.Count} reservations");
            filteredReservations = reservations.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading reservations: {ex.Message}", Severity.Error);
            await LogToConsoleAsync($"Exception loading reservations: {ex.Message}");
            await LogToConsoleAsync(ex.StackTrace);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Safe method to log to console that won't be called during prerendering
    private async Task LogToConsoleAsync(string message)
    {
        try
        {
            await _jsRuntime.InvokeVoidAsync("console.log", message);
        }
        catch
        {
            // Ignore errors during prerendering
        }
    }

    private async Task OutletChanged(string value)
    {
        selectedOutletId = value;
        await LoadReservations();
    }

    private async Task StatusChanged(string value)
    {
        selectedStatus = value;
        await LoadReservations();
    }

    private async Task SearchReservations()
    {
        await LoadReservations();
    }

    private bool QuickFilter(ReservationDto element)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return true;

        var searchTermLower = searchTerm.Trim().ToLower();

        return element.CustomerName.ToLower().Contains(searchTermLower) ||
               element.CustomerPhone.ToLower().Contains(searchTermLower) ||
               (element.CustomerEmail != null && element.CustomerEmail.ToLower().Contains(searchTermLower)) ||
               element.ReservationId.ToLower().Contains(searchTermLower) ||
               (element.SpecialRequests != null && element.SpecialRequests.ToLower().Contains(searchTermLower));
    }

    private Color GetStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "confirmed" => Color.Info,
            "completed" => Color.Dark,
            "cancelled" => Color.Error,
            "canceled" => Color.Error,
            "no-show" => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task OpenCreateReservationDialog()
    {
        try
        {
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
            var dialog = await DialogService.ShowAsync<ReservationFormDialog>("New Reservation", options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await LoadReservations();
                Snackbar.Add("Reservation created successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating reservation: {ex.Message}", Severity.Error);
        }
    }

    private async Task ViewReservationDetails(ReservationDto reservation)
    {
        var parameters = new DialogParameters
            {
                ["ReservationId"] = reservation.ReservationId
            };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<ReservationDetailsDialog>("Reservation Details", parameters, options);
        await dialog.Result;
    }

    private async Task CancelReservation(ReservationDto reservation)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to cancel the reservation for {reservation.CustomerName}?",
                ["ButtonText"] = "Cancel Reservation",
                ["Color"] = Color.Error
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Cancellation", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var success = await ReservationService.CancelReservationAsync(reservation.ReservationId, "Cancelled by admin");
            if (success)
            {
                Snackbar.Add("Reservation cancelled successfully", Severity.Success);
                await LoadReservations();
            }
            else
            {
                Snackbar.Add("Failed to cancel reservation", Severity.Error);
            }
        }
    }

    private async Task MarkNoShow(ReservationDto reservation)
    {
        var result = await DialogService.ShowMessageBox(
            "Mark as No-Show",
            $"Are you sure you want to mark the reservation for {reservation.CustomerName} as a no-show?",
            "Yes", "Cancel");

        if (result == true)
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                // Call the MarkAsNoShowAsync method from our HttpClientReservationService
                var success = await ReservationService.MarkAsNoShowAsync(reservation.ReservationId);

                if (success)
                {
                    Snackbar.Add("Reservation marked as no-show successfully", Severity.Success);
                    // Refresh the reservations list
                    await LoadReservations();
                }
                else
                {
                    Snackbar.Add("Failed to mark reservation as no-show", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error marking as no-show: {ex.Message}", Severity.Error);
                await LogToConsoleAsync($"Error marking as no-show: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task MarkCompleted(ReservationDto reservation)
    {
        var result = await DialogService.ShowMessageBox(
            "Mark as Completed",
            $"Are you sure you want to mark the reservation for {reservation.CustomerName} as completed?",
            "Yes", "Cancel");

        if (result == true)
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                // Call the MarkAsCompletedAsync method from our HttpClientReservationService
                var success = await ReservationService.MarkAsCompletedAsync(reservation.ReservationId);

                if (success)
                {
                    Snackbar.Add("Reservation marked as completed successfully", Severity.Success);
                    // Refresh the reservations list
                    await LoadReservations();
                }
                else
                {
                    Snackbar.Add("Failed to mark reservation as completed", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error marking as completed: {ex.Message}", Severity.Error);
                await LogToConsoleAsync($"Error marking as completed: {ex.Message}");
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}