@using FNBReservation.Portal.Models
@using FNBReservation.Portal.Services
@using FNBReservation.Portal.Components.Dialogs
@inject ICustomerService CustomerService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@rendermode InteractiveServer

<MudPaper Class="pa-4" Elevation="0">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField T="string" @bind-Value="SearchTerm" Label="Search by name or phone number"
                          Immediate="true" OnDebounceIntervalElapsed="SearchCustomers"
                          AdornmentIcon="@Icons.Material.Filled.Search" Adornment="Adornment.Start" />
        </MudItem>
        <MudItem xs="12" sm="6" md="8" Class="d-flex justify-end align-center">
            @if (!ShowBanned)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Block"
                           OnClick="OpenBanCustomerDialog" Class="ml-auto">
                    Ban Customer
                </MudButton>
            }
        </MudItem>
    </MudGrid>

    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    else
    {
        <MudTable Items="@filteredCustomers" Hover="true" Breakpoint="Breakpoint.Sm"
                  Loading="@isLoading" LoadingProgressColor="Color.Primary"
                  T="CustomerDto" Class="mt-4">
            <HeaderContent>
                <MudTh>Customer</MudTh>
                <MudTh>Contact</MudTh>
                <MudTh>Reservations</MudTh>
                <MudTh>Last Visit</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="customer">
                <MudTd DataLabel="Customer">
                    <MudText>@customer.Name</MudText>
                    <MudText Typo="Typo.caption">ID: @customer.CustomerId</MudText>
                </MudTd>
                <MudTd DataLabel="Contact">
                    <MudText>@customer.PhoneNumber</MudText>
                    <MudText Typo="Typo.caption">@customer.Email</MudText>
                </MudTd>
                <MudTd DataLabel="Reservations">
                    <MudText>Total: @customer.TotalReservations</MudText>
                    <MudText Typo="Typo.caption">No-shows: @customer.NoShows</MudText>
                </MudTd>
                <MudTd DataLabel="Last Visit">
                    @(customer.LastVisit?.ToString("d/M/yyyy") ?? "Never")
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip Color="@(customer.IsBanned ? Color.Error : Color.Success)" Size="Size.Small" T="string">
                        @(customer.IsBanned ? "Banned" : "Active")
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Actions">
                    <MudStack Row="true">
                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info"
                                       OnClick="@(() => ViewCustomerDetails(customer))" />

                        @if (customer.IsBanned)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.AssignmentReturn" Color="Color.Success"
                                           OnClick="@(() => UnbanCustomer(customer))" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Block" Color="Color.Error"
                                           OnClick="@(() => BanCustomer(customer))" />
                        }
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Align="Align.Center">
                    @(ShowBanned ? "No banned customers found." : "No customers found.")
                </MudText>
            </NoRecordsContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudPaper>

@code {
    [Parameter] public bool ShowBanned { get; set; } = false;

    private List<CustomerDto> customers = new();
    private List<CustomerDto> filteredCustomers = new();
    private bool isLoading = true;
    private string SearchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    protected override async Task OnParametersSetAsync()
    {
        await FilterCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            isLoading = true;
            customers = await CustomerService.GetCustomersAsync();
            await FilterCustomers();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading customers: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterCustomers()
    {
        filteredCustomers = customers
            .Where(c => c.IsBanned == ShowBanned)
            .ToList();

        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            filteredCustomers = filteredCustomers
                .Where(c =>
                    c.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.PhoneNumber.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    c.Email?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) == true ||
                    c.CustomerId.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task SearchCustomers()
    {
        await FilterCustomers();
        StateHasChanged();
    }

    private async Task BanCustomer(CustomerDto customer)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to ban customer <b>{customer.Name}</b>? This will prevent them from making new reservations.",
                ["ButtonText"] = "Ban Customer",
                ["Color"] = Color.Error
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Ban", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await CustomerService.BanCustomerAsync(customer.CustomerId);
                if (success)
                {
                    Snackbar.Add($"Customer {customer.Name} has been banned", Severity.Success);
                    customer.IsBanned = true;
                    await FilterCustomers();
                }
                else
                {
                    Snackbar.Add("Failed to ban customer", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task UnbanCustomer(CustomerDto customer)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to remove the ban for <b>{customer.Name}</b>? This will allow them to make reservations again.",
                ["ButtonText"] = "Remove Ban",
                ["Color"] = Color.Success
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Unban", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await CustomerService.UnbanCustomerAsync(customer.CustomerId);
                if (success)
                {
                    Snackbar.Add($"Ban removed for customer {customer.Name}", Severity.Success);
                    customer.IsBanned = false;
                    await FilterCustomers();
                }
                else
                {
                    Snackbar.Add("Failed to remove customer ban", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ViewCustomerDetails(CustomerDto customer)
    {
        var parameters = new DialogParameters
            {
                ["CustomerId"] = customer.CustomerId
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<CustomerDetailsDialog>("Customer Details", parameters, options);
        await dialog.Result;
    }

    private async Task OpenBanCustomerDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<BanCustomerDialog>("Ban New Customer", new DialogParameters(), options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadCustomers();
        }
    }
}