@page "/home"
@using Microsoft.AspNetCore.Components.Authorization
@using FNBReservation.Portal.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthService AuthService
@rendermode InteractiveServer

<PageTitle>Home - SmartQ</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Welcome to SmartQ</MudText>
    
    <AuthorizeView>
        <Authorized>
            <MudPaper Class="pa-4 mb-4">
                <MudText Typo="Typo.h5" Class="mb-2">Hello, @context.User.Identity.Name!</MudText>
                <MudText Typo="Typo.body1">You are logged in and can access all features of SmartQ.</MudText>
                
            </MudPaper>
        </Authorized>
        <NotAuthorized>
            <MudPaper Class="pa-4 mb-4">
                <MudText Typo="Typo.h5" Class="mb-2">Welcome to the SmartQ System</MudText>
                <MudText Typo="Typo.body1" Class="mb-3">Please log in to access the reservation management features.</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/"))">Log In</MudButton>
            </MudPaper>
        </NotAuthorized>
    </AuthorizeView>
    
    <MudDivider Class="my-6" />
    
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudCard Class="h-100">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Queue Management</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.QueuePlayNext" Color="Color.Primary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Efficiently manage customer queues and optimize wait times for your restaurant.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="4">
            <MudCard Class="h-100">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Table Reservations</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.TableRestaurant" Color="Color.Primary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Handle table reservations with ease and maximize your restaurant's seating capacity.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" md="4">
            <MudCard Class="h-100">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Customer Management</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.PeopleAlt" Color="Color.Primary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Keep track of customer preferences and history to provide personalized service.</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {
                await JS.InvokeVoidAsync("console.log", "Home page loaded");
                
                // Check authentication state through the service if needed for logging
                if (AuthService != null)
                {
                    var isAuthenticated = await AuthService.IsUserAuthenticated();
                    await JS.InvokeVoidAsync("console.log", $"Home page auth check: {isAuthenticated}");
                }
            }
            catch (Exception ex)
            {
                // This is safe in OnAfterRenderAsync
                await JS.InvokeVoidAsync("console.error", $"Error in Home page: {ex.Message}");
            }
        }
    }
}