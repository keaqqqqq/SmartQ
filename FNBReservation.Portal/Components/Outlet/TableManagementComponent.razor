@using FNBReservation.Portal.Models
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject ITableService TableService
@rendermode InteractiveServer

<MudPaper Class="pa-4 mb-4" Elevation="2">
    <MudText Typo="Typo.h5" Class="mb-4">Table Management</MudText>

    @if (string.IsNullOrEmpty(OutletId))
    {
        <MudAlert Severity="Severity.Warning">Please select an outlet first to manage tables.</MudAlert>
    }
    else
    {
        <TablesEditor OutletId="Guid.Parse(OutletId)" @bind-Tables="Tables" OnTablesUpdated="UpdateTables" />
    }
</MudPaper>

@code {
    [Parameter] public string OutletId { get; set; }
    [Parameter] public List<TableInfo> Tables { get; set; } = new List<TableInfo>();
    [Parameter] public EventCallback<List<TableInfo>> TablesChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(OutletId))
        {
            await LoadTables();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(OutletId) && Tables.Count == 0)
        {
            await LoadTables();
        }
    }

    private async Task LoadTables()
    {
        try
        {
            var outletGuid = Guid.Parse(OutletId);
            Tables = await TableService.GetTablesByOutletIdAsync(outletGuid);
            await TablesChanged.InvokeAsync(Tables);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Error loading tables: {ex.Message}");
        }
    }

    private async Task UpdateTables(List<TableInfo> updatedTables)
    {
        Tables = updatedTables;
        await TablesChanged.InvokeAsync(Tables);
    }
} 