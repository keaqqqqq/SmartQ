import React, { useState } from 'react';

const CustomerManagement = () => {
  // Sample data
  const initialCustomers = [
    {
      id: 'cust-123',
      name: 'John Smith',
      phone: '+1234567890',
      email: 'john.smith@example.com',
      totalReservations: 12,
      noShows: 1,
      lastVisit: '2025-02-10T19:30:00Z',
      banned: false,
      createdAt: '2024-12-15T14:30:00Z'
    },
    {
      id: 'cust-456',
      name: 'Emily Johnson',
      phone: '+1234567891',
      email: 'emily.j@example.com',
      totalReservations: 8,
      noShows: 0,
      lastVisit: '2025-02-05T18:00:00Z',
      banned: false,
      createdAt: '2024-12-20T11:15:00Z'
    },
    {
      id: 'cust-789',
      name: 'Michael Brown',
      phone: '+1234567892',
      email: 'mbrown@example.com',
      totalReservations: 3,
      noShows: 2,
      lastVisit: '2025-01-15T20:30:00Z',
      banned: true,
      createdAt: '2025-01-02T16:45:00Z'
    },
    {
      id: 'cust-101',
      name: 'Sarah Williams',
      phone: '+1234567893',
      email: 'sarah.w@example.com',
      totalReservations: 6,
      noShows: 0,
      lastVisit: '2025-02-12T19:00:00Z',
      banned: false,
      createdAt: '2025-01-05T09:30:00Z'
    }
  ];
  
  const initialBannedCustomers = [
    {
      id: 'ban-123',
      customerId: 'cust-789',
      customerName: 'Michael Brown',
      phone: '+1234567892',
      reason: 'Multiple no-shows',
      bannedAt: '2025-02-01T10:30:00Z',
      bannedUntil: '2025-03-01T10:30:00Z',
      bannedBy: 'staff-456',
      staffName: 'Jane Manager'
    },
    {
      id: 'ban-456',
      customerId: 'cust-202',
      customerName: 'Robert Davis',
      phone: '+1234567894',
      reason: 'Disruptive behavior',
      bannedAt: '2025-01-15T14:00:00Z',
      bannedUntil: null,
      bannedBy: 'staff-123',
      staffName: 'John Manager'
    }
  ];
  
  // State
  const [customers, setCustomers] = useState(initialCustomers);
  const [bannedCustomers, setBannedCustomers] = useState(initialBannedCustomers);
  const [activeTab, setActiveTab] = useState('customers'); // 'customers' or 'banned'
  const [currentCustomer, setCurrentCustomer] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [showBanModal, setShowBanModal] = useState(false);
  const [showRemoveBanModal, setShowRemoveBanModal] = useState(false);
  const [banToRemove, setBanToRemove] = useState(null);
  
  // Ban form state
  const [banForm, setBanForm] = useState({
    phone: '',
    reason: '',
    duration: 30 // days
  });
  
  // Filter customers based on search
  const filteredCustomers = customers.filter(customer => 
    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
    customer.phone.includes(searchTerm)
  );
  
  // Handle search input change
  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };
  
  // Handle ban form input change
  const handleBanFormChange = (e) => {
    const { name, value } = e.target;
    setBanForm(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // View customer details
  const handleViewCustomer = (customer) => {
    setCurrentCustomer(customer);
  };
  
  // Show ban modal
  const handleBanClick = (customer) => {
    setBanForm({
      phone: customer ? customer.phone : '',
      reason: '',
      duration: 30
    });
    setShowBanModal(true);
  };
  
  // Handle ban submission
  const handleBanSubmit = (e) => {
    e.preventDefault();
    
    // In a real application, this would make an API call
    // For the demo, we'll update the state locally
    
    // Find the customer by phone number
    const customer = customers.find(c => c.phone === banForm.phone);
    
    if (customer) {
      // Update the banned status
      setCustomers(customers.map(c => 
        c.id === customer.id ? { ...c, banned: true } : c
      ));
      
      // Calculate ban end date
      const banEndDate = banForm.duration > 0 
        ? new Date(Date.now() + banForm.duration * 24 * 60 * 60 * 1000).toISOString()
        : null;
      
      // Add to banned customers
      const newBan = {
        id: `ban-${Date.now()}`,
        customerId: customer.id,
        customerName: customer.name,
        phone: customer.phone,
        reason: banForm.reason,
        bannedAt: new Date().toISOString(),
        bannedUntil: banEndDate,
        bannedBy: 'staff-current', // Would come from auth context
        staffName: 'Current User' // Would come from auth context
      };
      
      setBannedCustomers([...bannedCustomers, newBan]);
    }
    
    setShowBanModal(false);
  };
  
  // Show remove ban modal
  const handleRemoveBanClick = (ban) => {
    setBanToRemove(ban);
    setShowRemoveBanModal(true);
  };
  
  // Handle remove ban confirmation
  const handleRemoveBanConfirm = () => {
    // In a real application, this would make an API call
    
    // Remove from banned list
    setBannedCustomers(bannedCustomers.filter(b => b.id !== banToRemove.id));
    
    // Update customer ban status
    setCustomers(customers.map(c => 
      c.id === banToRemove.customerId ? { ...c, banned: false } : c
    ));
    
    setShowRemoveBanModal(false);
    setBanToRemove(null);
  };
  
  // Render Ban Form Modal
  const renderBanModal = () => {
    if (!showBanModal) return null;
    
    return (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div className="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-medium text-gray-900">Ban Customer</h3>
            <button 
              className="text-gray-400 hover:text-gray-500"
              onClick={() => setShowBanModal(false)}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <form onSubmit={handleBanSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Phone Number</label>
              <input
                type="text"
                name="phone"
                value={banForm.phone}
                onChange={handleBanFormChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                required
                placeholder="+1234567890"
              />
              <p className="mt-1 text-xs text-gray-500">Enter the customer's phone number to ban them</p>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Reason</label>
              <textarea
                name="reason"
                value={banForm.reason}
                onChange={handleBanFormChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
                rows="3"
                required
                placeholder="Explain the reason for banning..."
              ></textarea>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Duration (Days)</label>
              <div className="flex items-center mt-1">
                <input
                  type="number"
                  name="duration"
                  value={banForm.duration}
                  onChange={handleBanFormChange}
                  className="block w-full border border-gray-300 rounded-md shadow-sm p-2"
                  min="0"
                />
                <span className="ml-2 text-sm text-gray-500">0 = Permanent</span>
              </div>
            </div>
            
            <div className="flex justify-end space-x-3 pt-4">
              <button
                type="button"
                onClick={() => setShowBanModal(false)}
                className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
              >
                Cancel
              </button>
              <button
                type="submit"
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
              >
                Ban Customer
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };
  
  // Render Remove Ban Confirmation Modal
  const renderRemoveBanModal = () => {
    if (!showRemoveBanModal || !banToRemove) return null;
    
    return (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div className="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
          <h3 className="text-lg font-medium text-gray-900 mb-4">Remove Ban</h3>
          <p className="text-gray-500 mb-4">
            Are you sure you want to remove the ban for {banToRemove.customerName}?
          </p>
          <div className="flex justify-end space-x-3">
            <button
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
              onClick={() => setShowRemoveBanModal(false)}
            >
              Cancel
            </button>
            <button
              className="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700"
              onClick={handleRemoveBanConfirm}
            >
              Remove Ban
            </button>
          </div>
        </div>
      </div>
    );
  };
  
  // Render Customer Details Modal
  const renderCustomerDetails = () => {
    if (!currentCustomer) return null;
    
    return (
      <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div className="relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-medium text-gray-900">Customer Details</h2>
            <button
              className="text-gray-400 hover:text-gray-500"
              onClick={() => setCurrentCustomer(null)}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <div className="mb-6">
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-lg font-medium text-gray-900">{currentCustomer.name}</h3>
                <p className="text-gray-500">ID: {currentCustomer.id}</p>
              </div>
              <span 
                className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                  currentCustomer.banned 
                    ? 'bg-red-100 text-red-800' 
                    : 'bg-green-100 text-green-800'
                }`}
              >
                {currentCustomer.banned ? 'Banned' : 'Active'}
              </span>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium text-gray-700 mb-2">Contact Information</h4>
              <div className="space-y-1 mb-4">
                <p className="text-sm text-gray-500">Phone: {currentCustomer.phone}</p>
                <p className="text-sm text-gray-500">Email: {currentCustomer.email}</p>
              </div>
              
              <h4 className="font-medium text-gray-700 mb-2">Account Information</h4>
              <div className="space-y-1">
                <p className="text-sm text-gray-500">Created: {new Date(currentCustomer.createdAt).toLocaleDateString()}</p>
                <p className="text-sm text-gray-500">Last Visit: {new Date(currentCustomer.lastVisit).toLocaleDateString()}</p>
              </div>
            </div>
            
            <div>
              <h4 className="font-medium text-gray-700 mb-2">Reservation History</h4>
              <div className="space-y-1 mb-4">
                <p className="text-sm text-gray-500">Total Reservations: {currentCustomer.totalReservations}</p>
                <p className="text-sm text-gray-500">No-Shows: {currentCustomer.noShows}</p>
                {currentCustomer.noShows > 0 && (
                  <p className="text-sm text-red-500">No-show Rate: {((currentCustomer.noShows / currentCustomer.totalReservations) * 100).toFixed(1)}%</p>
                )}
              </div>
              
              {/* In a real app, you might show recent reservations here */}
              <div className="border-t pt-4 mt-4">
                <h4 className="font-medium text-gray-700 mb-2">Recent Reservations</h4>
                <p className="text-sm text-gray-500 italic">Reservation history would appear here</p>
              </div>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end">
            <button
              className="mr-2 px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
              onClick={() => setCurrentCustomer(null)}
            >
              Close
            </button>
            {!currentCustomer.banned ? (
              <button
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                onClick={() => {
                  setCurrentCustomer(null);
                  handleBanClick(currentCustomer);
                }}
              >
                Ban Customer
              </button>
            ) : (
              <button
                className="px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2"
                onClick={() => {
                  setCurrentCustomer(null);
                  const ban = bannedCustomers.find(b => b.customerId === currentCustomer.id);
                  if (ban) handleRemoveBanClick(ban);
                }}
              >
                Remove Ban
              </button>
            )}
          </div>
        </div>
      </div>
    );
  };
  
  return (
    <div className="bg-gray-50 min-h-screen p-4">
      <div className="max-w-6xl mx-auto">
        <div className="mb-6 flex space-x-4 border-b">
          <button
            className={`pb-4 px-1 ${activeTab === 'customers' ? 'border-b-2 border-blue-500 text-blue-600 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('customers')}
          >
            All Customers
          </button>
          <button
            className={`pb-4 px-1 ${activeTab === 'banned' ? 'border-b-2 border-blue-500 text-blue-600 font-medium' : 'text-gray-500 hover:text-gray-700'}`}
            onClick={() => setActiveTab('banned')}
          >
            Banned Customers
          </button>
        </div>
        
        {activeTab === 'customers' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h1 className="text-2xl font-bold">Customer Management</h1>
              <button
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2"
                onClick={() => handleBanClick()}
              >
                Ban Customer
              </button>
            </div>
            
            <div className="mb-6">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search by name or phone number..."
                  value={searchTerm}
                  onChange={handleSearchChange}
                  className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring-blue-500 focus:border-blue-500"
                />
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg className="h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
                  </svg>
                </div>
              </div>
            </div>
            
            <div className="bg-white shadow-md rounded-lg overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Customer
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Contact
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Reservations
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Last Visit
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCustomers.map((customer) => (
                    <tr key={customer.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="font-medium text-gray-900">{customer.name}</div>
                        <div className="text-sm text-gray-500">ID: {customer.id}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">{customer.phone}</div>
                        <div className="text-sm text-gray-500">{customer.email}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">Total: {customer.totalReservations}</div>
                        <div className="text-sm text-gray-500">No-shows: {customer.noShows}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">
                          {new Date(customer.lastVisit).toLocaleDateString()}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span 
                          className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            customer.banned 
                              ? 'bg-red-100 text-red-800' 
                              : 'bg-green-100 text-green-800'
                          }`}
                        >
                          {customer.banned ? 'Banned' : 'Active'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          className="text-blue-600 hover:text-blue-900 mr-3"
                          onClick={() => handleViewCustomer(customer)}
                        >
                          View
                        </button>
                        {!customer.banned ? (
                          <button
                            className="text-red-600 hover:text-red-900"
                            onClick={() => handleBanClick(customer)}
                          >
                            Ban
                          </button>
                        ) : (
                          <button
                            className="text-yellow-600 hover:text-yellow-900"
                            onClick={() => {
                              const ban = bannedCustomers.find(b => b.customerId === customer.id);
                              if (ban) handleRemoveBanClick(ban);
                            }}
                          >
                            Unban
                          </button>
                        )}
                      </td>
                    </tr>
                  ))}
                  {filteredCustomers.length === 0 && (
                    <tr>
                      <td colSpan="6" className="px-6 py-4 text-center text-gray-500">
                        No customers found matching "{searchTerm}".
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        )}
        
        {activeTab === 'banned' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h1 className="text-2xl font-bold">Banned Customers</h1>
            </div>
            
            <div className="bg-white shadow-md rounded-lg overflow-hidden">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Customer
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Reason
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Banned At
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Duration
                    </th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Banned By
                    </th>
                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {bannedCustomers.map((ban) => (
                    <tr key={ban.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="font-medium text-gray-900">{ban.customerName}</div>
                        <div className="text-sm text-gray-500">{ban.phone}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">{ban.reason}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">
                          {new Date(ban.bannedAt).toLocaleDateString()}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">
                          {ban.bannedUntil 
                            ? `Until ${new Date(ban.bannedUntil).toLocaleDateString()}` 
                            : 'Permanent'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-gray-500">{ban.staffName}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button
                          className="text-blue-600 hover:text-blue-900"
                          onClick={() => handleRemoveBanClick(ban)}
                        >
                          Remove Ban
                        </button>
                      </td>
                    </tr>
                  ))}
                  {bannedCustomers.length === 0 && (
                    <tr>
                      <td colSpan="6" className="px-6 py-4 text-center text-gray-500">
                        No banned customers found.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        )}
        
        {/* Modals */}
        {renderCustomerDetails()}
        {renderBanModal()}
        {renderRemoveBanModal()}
      </div>
    </div>
  );
};

export default CustomerManagement;
