// <auto-generated />
using System;
using FNBReservation.Modules.Queue.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FNBReservation.Modules.Queue.Infrastructure.Data.Migrations
{
    [DbContext(typeof(QueueDbContext))]
    [Migration("20250405101329_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CalledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("EstimatedWaitMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("HeldSince")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsHeld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid>("OutletId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PartySize")
                        .HasColumnType("int");

                    b.Property<string>("QueueCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("QueuePosition")
                        .HasColumnType("int");

                    b.Property<DateTime>("QueuedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("SeatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SpecialRequests")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CustomerPhone");

                    b.HasIndex("OutletId");

                    b.HasIndex("QueueCode")
                        .IsUnique();

                    b.HasIndex("QueuePosition");

                    b.HasIndex("Status");

                    b.HasIndex("OutletId", "Status");

                    b.ToTable("QueueEntries");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("QueueEntryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("QueueEntryId");

                    b.HasIndex("Status");

                    b.ToTable("QueueNotifications");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueStatusChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("ChangedById")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("OldStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("QueueEntryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ChangedAt");

                    b.HasIndex("QueueEntryId");

                    b.ToTable("QueueStatusChanges");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueTableAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("QueueEntryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("SeatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("QueueEntryId");

                    b.HasIndex("Status");

                    b.HasIndex("TableId");

                    b.ToTable("QueueTableAssignments");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueNotification", b =>
                {
                    b.HasOne("FNBReservation.Modules.Queue.Core.Entities.QueueEntry", "QueueEntry")
                        .WithMany("Notifications")
                        .HasForeignKey("QueueEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueEntry");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueStatusChange", b =>
                {
                    b.HasOne("FNBReservation.Modules.Queue.Core.Entities.QueueEntry", "QueueEntry")
                        .WithMany("StatusChanges")
                        .HasForeignKey("QueueEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueEntry");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueTableAssignment", b =>
                {
                    b.HasOne("FNBReservation.Modules.Queue.Core.Entities.QueueEntry", "QueueEntry")
                        .WithMany("TableAssignments")
                        .HasForeignKey("QueueEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueEntry");
                });

            modelBuilder.Entity("FNBReservation.Modules.Queue.Core.Entities.QueueEntry", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("StatusChanges");

                    b.Navigation("TableAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
