upstream api_servers {
    # Uses least_conn method for better load distribution under varying loads
    least_conn;
    # Docker will resolve api to all running API containers
    server api:80;
    keepalive 32;
}

# Server block for WebSocket support
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {
    listen 80;
    server_name _;

    # Enable compression
    gzip on;
    gzip_min_length 1000;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Proxy headers
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    
    # Proxy timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Health check location
    location /health {
    proxy_pass http://api_servers;
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    access_log off;
    }

    # NEW NGINX INTERNAL HEALTH CHECK
    location /nginx-health {
    access_log off;
    add_header Content-Type text/plain;
    return 200 'ok';
    }

    # API locations
    location / {
        proxy_pass http://api_servers;
    }

    # Special handling for SignalR/WebSockets
    location /queuehub {
        proxy_pass http://api_servers;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_cache off;
        proxy_buffering off;
        proxy_read_timeout 86400s; # 24 hours for long-lived connections
    }
}

# HTTPS server (commented out - needs valid certificates)
# server {
#     listen 443 ssl http2;
#     server_name _;
#     
#     ssl_certificate /etc/nginx/ssl/cert.pem;
#     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # HSTS (uncomment in production)
#     # add_header Strict-Transport-Security "max-age=63072000" always;
#     
#     # The rest of configuration similar to HTTP server
#     location / {
#         proxy_pass http://api_servers;
#         proxy_http_version 1.1;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
#     
#     location /queuehub {
#         proxy_pass http://api_servers;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection $connection_upgrade;
#         proxy_set_header Host $host;
#         proxy_cache off;
#         proxy_buffering off;
#         proxy_read_timeout 86400s;
#     }
# }